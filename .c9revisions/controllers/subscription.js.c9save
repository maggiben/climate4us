{"ts":1357682218910,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"///////////////////////////////////////////////////////////////////////////////\r\n// @file         : subscription.js                                           //\r\n// @summary      : subscription model                                        //\r\n// @version      : 0.1                                                       //\r\n// @project      : Node.JS + Express boilerplate for cloud9 and appFog       //\r\n// @description  :                                                           //\r\n// @author       : Benjamin Maggi                                            //\r\n// @email        : benjaminmaggi@gmail.com                                   //\r\n// @date         : 12 Dec 2012                                               //\r\n// ------------------------------------------------------------------------- //\r\n//                                                                           //\r\n// @copyright Copyright 2012 Benjamin Maggi, all rights reserved.            //\r\n//                                                                           //\r\n//                                                                           //\r\n// License:                                                                  //\r\n// This program is free software; you can redistribute it                    //\r\n// and/or modify it under the terms of the GNU General Public                //\r\n// License as published by the Free Software Foundation;                     //\r\n// either version 2 of the License, or (at your option) any                  //\r\n// later version.                                                            //\r\n//                                                                           //\r\n// This program is distributed in the hope that it will be useful,           //\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of            //\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             //\r\n// GNU General Public License for more details.                              //\r\n//                                                                           //\r\n///////////////////////////////////////////////////////////////////////////////\r\n\r\n// Controllers\r\nvar mongoose = require('mongoose');\r\n\r\n// Load model\r\nvar subscription_schema = require('../models/subscription')\r\n  , Subscription = mongoose.model('Subscription', subscription_schema);\r\n  \r\n///////////////////////////////////////////////////////////////////////////////\r\n// Route to get all Subscriptions                                            //\r\n//                                                                           //\r\n// @param {Object} request                                                   //\r\n// @param {Object} response                                                  //\r\n// @param {Object} next                                                      //\r\n// @return {Object} JSON Collection of Subscriptions                         //\r\n//                                                                           //\r\n// @api public                                                               //\r\n//                                                                           //\r\n// @url GET /subscription/getall                                             //\r\n///////////////////////////////////////////////////////////////////////////////\r\nexports.getAll = function (request, response, next) {\r\n    \r\n    response.contentType('application/json');\r\n    Subscription.find(gotSubscriptions);\r\n    \r\n    function gotSubscriptions(err, subscriptions) {\r\n        if (err) {\r\n            console.log(err);\r\n            return next();\r\n        }\r\n        var subscriptionsJSON = JSON.stringify(subscriptions);\r\n        return response.send(subscriptionsJSON);\r\n    }\r\n};\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n// Route to a specific Subscription                                          //\r\n//                                                                           //\r\n// @param {Object} request                                                   //\r\n// @param {Object} response                                                  //\r\n// @param {Object} next                                                      //\r\n// @return {Object} JSON Subscription                                        //\r\n//                                                                           //\r\n// @api public                                                               //\r\n//                                                                           //\r\n// @url GET /subscription/getbyid                                            //\r\n///////////////////////////////////////////////////////////////////////////////\r\nexports.getById = function (request, response, next) {\r\n    \r\n    response.contentType('application/json');\r\n    Subscription.findById(request.params.id, gotSubscription);\r\n    \r\n    function gotSubscription(err, subscription) {\r\n        if (err) {\r\n            return next(err);\r\n        }\r\n        var subscriptionJSON = JSON.stringify(subscription);\r\n        return response.send(subscriptionJSON);\r\n    }\r\n};\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n// Route to add a Subscription                                               //\r\n//                                                                           //\r\n// @param {Object} request                                                   //\r\n// @param {Object} response                                                  //\r\n// @param {Object} next                                                      //\r\n// @return {Object} JSON result                                              //\r\n//                                                                           //\r\n// @api public                                                               //\r\n//                                                                           //\r\n// @url GET /subscription/create                                             //\r\n///////////////////////////////////////////////////////////////////////////////\r\nexports.create = function (request, response, next) {\r\n\r\n    console.log('create-body: ' + JSON.stringify(request.body));\r\n    var subscription = new Subscription({\r\n        name: request.body.name,\r\n        type: request.body.type,\r\n        magic: Math.floor(Math.random() * 99999),\r\n        created: new Date(),\r\n        lastUpdate: new Date(),\r\n        lastAccess: new Date(),\r\n        isReady: false,\r\n        stations: request.body.stations,\r\n        order: request.body.order,\r\n        selected: request.body.selected,\r\n    });\r\n    \r\n    response.contentType('application/json');\r\n    subscription.save(onSaved);\r\n\r\n    function onSaved(err, subscription) {\r\n        if (err) {\r\n            console.log(err);\r\n            return next(err);\r\n        }\r\n        console.log(\"onSaved\");\r\n        return response.send(JSON.stringify(subscription));\r\n    }\r\n};\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n// Route to update a Subscription                                            //\r\n//                                                                           //\r\n// @param {Object} request                                                   //\r\n// @param {Object} response                                                  //\r\n// @param {Object} next                                                      //\r\n// @return {Object} JSON updated document                                    //\r\n//                                                                           //\r\n// @api public                                                               //\r\n//                                                                           //\r\n// @url POST /station/update/:id                                             //\r\n///////////////////////////////////////////////////////////////////////////////\r\nexports.update = function (request, response, next) {\r\n    \r\n    response.contentType('application/json');\r\n    Subscription.findByIdAndUpdate({_id : request.params.id}, request.body, updateSubscription);\r\n    \r\n    function updateSubscription (error, station) {\r\n        if (error) {\r\n            console.log(error);\r\n            return next(error);\r\n        }\r\n        if (!station) {\r\n            console.log(error);\r\n            return next(error);\r\n        } \r\n        else {\r\n            console.log(JSON.stringify(request.body));\r\n        }\r\n        var subscriptionJSON = JSON.stringify(station);\r\n        return response.send(subscriptionJSON);\r\n    }\r\n};\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n// Route to remove a Subscription                                            //\r\n//                                                                           //\r\n// @param {Object} request                                                   //\r\n// @param {Object} response                                                  //\r\n// @param {Object} next                                                      //\r\n// @return {Object} JSON result                                              //\r\n//                                                                           //\r\n// @api public                                                               //\r\n//                                                                           //\r\n// @url GET /subscription/remove/:id                                         //\r\n///////////////////////////////////////////////////////////////////////////////\r\nexports.remove = function (request, response, next) {\r\n    \r\n    response.contentType('application/json');\r\n    Subscription.remove({_id: request.params.id}, delSubscription);\r\n    \r\n    function delSubscription(error, subscription) {\r\n        if (error) {\r\n            return next(error);\r\n        }\r\n        var msgJSON = JSON.stringify({action: 'remove', result: 0});\r\n        return response.send(msgJSON);\r\n    }\r\n};\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n// Route to store stations order                                             //\r\n//                                                                           //\r\n// @param {Object} request                                                   //\r\n// @param {Object} response                                                  //\r\n// @param {Object} next                                                      //\r\n// @return {Object} JSON result                                              //\r\n//                                                                           //\r\n// @api public                                                               //\r\n//                                                                           //\r\n// @url GET /subscription/reorder                                            //\r\n///////////////////////////////////////////////////////////////////////////////\r\nexports.reorder = function (request, response, next) {\r\n    \r\n    response.contentType('application/json');\r\n    console.log('new order: %s', JSON.stringify(request.body));\r\n    \r\n    Subscription.findById(request.body._id, gotSubscription);\r\n    \r\n    function gotSubscription(error, subscription) {\r\n        if (error) {\r\n            return next(error);\r\n        }\r\n        subscription.order = request.body.ids;\r\n        subscription.save(onSaved);\r\n        function onSaved(error, subscription) {\r\n            if (error) {\r\n                console.log(error);\r\n                return next(error);\r\n            }\r\n            console.log('subscription %s', JSON.stringify(subscription));\r\n            return response.send(JSON.stringify(subscription));\r\n        }\r\n    }\r\n};\r\n///////////////////////////////////////////////////////////////////////////////\r\n// Route to remove all Subscriptions                                         //\r\n//                                                                           //\r\n// @param {Object} request                                                   //\r\n// @param {Object} response                                                  //\r\n// @param {Object} next                                                      //\r\n// @return {Object} JSON result                                              //\r\n//                                                                           //\r\n// @api public                                                               //\r\n//                                                                           //\r\n// @url GET /subscription/removeall                                          //\r\n///////////////////////////////////////////////////////////////////////////////\r\nexports.removeall = function (request, response, next) {\r\n    \r\n    response.contentType('application/json');\r\n    Subscription.find(gotSubscriptions);\r\n\r\n    function gotSubscriptions(error, subscriptions) {\r\n        if (error) {\r\n            console.log(error)\r\n            return next();\r\n        }\r\n        if (!subscriptions || !Array.isArray(subscriptions) || subscriptions.length === 0)\r\n        {\r\n            console.log('no docs found');\r\n            return next();\r\n        }\r\n        subscriptions.forEach(function (subscription) {\r\n            subscription.remove(function (err, product) {\r\n                console.log('document id:%d could not be removed', subscription._id);\r\n                return next();\r\n            });\r\n        });\r\n        var msgJSON = JSON.stringify({action: 'removeall', result: true});\r\n        return response.send(msgJSON);\r\n    }\r\n};\r\n\r\n"]],"start1":0,"start2":0,"length1":0,"length2":13663}]],"length":13663}

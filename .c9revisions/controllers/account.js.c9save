{"ts":1357682218910,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"///////////////////////////////////////////////////////////////////////////////\n// @file         : account.js                                                //\n// @summary      : account controller                                        //\n// @version      : 0.1                                                       //\n// @project      : Node.JS + Express boilerplate for cloud9 and appFog       //\n// @description  :                                                           //\n// @author       : Benjamin Maggi                                            //\n// @email        : benjaminmaggi@gmail.com                                   //\n// @date         : 12 Dec 2012                                               //\n// ------------------------------------------------------------------------- //\n//                                                                           //\n// @copyright Copyright 2012 Benjamin Maggi, all rights reserved.            //\n//                                                                           //\n//                                                                           //\n// License:                                                                  //\n// This program is free software; you can redistribute it                    //\n// and/or modify it under the terms of the GNU General Public                //\n// License as published by the Free Software Foundation;                     //\n// either version 2 of the License, or (at your option) any                  //\n// later version.                                                            //\n//                                                                           //\n// This program is distributed in the hope that it will be useful,           //\n// but WITHOUT ANY WARRANTY; without even the implied warranty of            //\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             //\n// GNU General Public License for more details.                              //\n//                                                                           //\n///////////////////////////////////////////////////////////////////////////////\n\n\n// Controllers\nvar mongoose = require('mongoose');\n\n// Load model\nvar account_schema = require('../models/account')\n  , Account = mongoose.model('Account', account_schema);\n\n\n///////////////////////////////////////////////////////////////////////////////\n// Route to get specific Account by its _id                                  //\n//                                                                           //\n// @param {Object} request                                                   //\n// @param {Object} response                                                  //\n// @param {Object} next                                                      //\n// @return {Object} JSON Account                                             //\n//                                                                           //\n// @api public                                                               //\n//                                                                           //\n// @url GET /account/getAccountById/:id                                      //\n///////////////////////////////////////////////////////////////////////////////\nexports.getAccountById = function(request, response, next) {\n    \n    response.contentType('application/json');\n    Account.findById(request.params.id, gotAccount);\n    \n    function gotAccount(error, account) {\n        if (error) {\n            return next(error);\n        }\n        var accountJSON = JSON.stringify(account);\n        return response.send(accountJSON);\n    }\n};\n\n///////////////////////////////////////////////////////////////////////////////\n// Route to get currently authenticated account                              //\n//                                                                           //\n// @param {Object} request                                                   //\n// @param {Object} response                                                  //\n// @param {Object} next                                                      //\n// @return {Object} JSON authenticated account                               //\n//                                                                           //\n// @api public                                                               //\n//                                                                           //\n// @url GET /account/getAccount                                              //\n///////////////////////////////////////////////////////////////////////////////\nexports.getAccount = function(request, response, next) {\n    response.contentType('application/json');\n    if(request.isAuthenticated()) {\n        var account = JSON.stringify(request.user);\n        return response.send(account);\n    }\n    var message = JSON.stringify({error: 'youre not logged in'});\n    return response.send(message);\n};\n\nexports.createAccount = function(request, response, next) {\n    \n    response.contentType('application/json');\n    var username = request.body.username;\n    console.log(\"registering: user: %s pass: %s\", request.body.username, request.body.password);\n    \n    Account.findOne({username : username }, function(error, existingUser) {\n        if (error || existingUser) {\n            console.log(\"existingUser\");\n            var message = JSON.stringify({error: \"existingUser\", message: 'User already exists'});\n            return response.send(message);\n        }\n        var account = new Account({ username : request.body.username, email: request.body.username});\n        account.setPassword(request.body.password, function(error) {\n            if (error) {\n                return response.render('signup', { account : account });\n            }\n            account.save(function(error) {\n                if (error) {\n                    var message = JSON.stringify({error: \"faultSave\", message: 'Cannot save user'});\n                    return response.send(message);\n                }\n                var message = JSON.stringify(account);\n                return response.send(message);\n            });\n        });\n    });\n};\n\n///////////////////////////////////////////////////////////////////////////////\n// Route to update an Account                                                //\n//                                                                           //\n// @param {Object} request                                                   //\n// @param {Object} response                                                  //\n// @param {Object} next                                                      //\n// @return {Object} JSON updated account                                     //\n//                                                                           //\n// @api public                                                               //\n//                                                                           //\n// @url POST /account/update/:id                                             //\n///////////////////////////////////////////////////////////////////////////////\nexports.update = function (request, response, next) {\n    \n    response.contentType('application/json');\n    Account.findByIdAndUpdate({username : request.body.username}, request.body, updateAccount);\n    \n    function updateAccount (error, account) {\n        if (error) {\n            console.log(error);\n            return next(error);\n        }\n        if (!account) {\n            console.log(error);\n            return next(error);\n        } \n        else {\n            console.log(JSON.stringify(account));\n        }\n        var accountJSON = JSON.stringify(account);\n        return response.send(accountJSON);\n    }\n};\n\nexports.setSubscription = function(request, response, next) {\n    \n    response.contentType('application/json');\n    \n    Account.findOne({username : request.user.username }, function(error, account) {\n        if (error) {\n            console.log(error);\n            return next(error);\n        }\n        if (!account) {\n            console.log(error);\n            return next(error);\n        }\n        console.log(\"got Accoun\");\n        account.subscription = request.body.subscription;\n        account.save(onSaved);\n\n        function onSaved(error, station) {\n            if (error) {\n                console.log(error);\n                return next(error);\n            }\n            console.log(\"onSaved\");\n            var accountJSON = JSON.stringify(account);\n            return response.send(accountJSON);\n        }\n    });\n};\n\n"]],"start1":0,"start2":0,"length1":0,"length2":8624}]],"length":8624}

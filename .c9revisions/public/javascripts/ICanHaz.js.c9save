{"ts":1355024758118,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*!\nICanHaz.js version 0.10 -- by @HenrikJoreteg\nMore info at: http://icanhazjs.com\n*/\n(function () {\n/*\n  mustache.js â€” Logic-less templates in JavaScript\n\n  See http://mustache.github.com/ for more info.\n*/\n\nvar Mustache = function () {\n  var _toString = Object.prototype.toString;\n\n  Array.isArray = Array.isArray || function (obj) {\n    return _toString.call(obj) == \"[object Array]\";\n  }\n\n  var _trim = String.prototype.trim, trim;\n\n  if (_trim) {\n    trim = function (text) {\n      return text == null ? \"\" : _trim.call(text);\n    }\n  } else {\n    var trimLeft, trimRight;\n\n    // IE doesn't match non-breaking spaces with \\s.\n    if ((/\\S/).test(\"\\xA0\")) {\n      trimLeft = /^[\\s\\xA0]+/;\n      trimRight = /[\\s\\xA0]+$/;\n    } else {\n      trimLeft = /^\\s+/;\n      trimRight = /\\s+$/;\n    }\n\n    trim = function (text) {\n      return text == null ? \"\" :\n        text.toString().replace(trimLeft, \"\").replace(trimRight, \"\");\n    }\n  }\n\n  var escapeMap = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n\n  function escapeHTML(string) {\n    return String(string).replace(/&(?!\\w+;)|[<>\"']/g, function (s) {\n      return escapeMap[s] || s;\n    });\n  }\n\n  var regexCache = {};\n  var Renderer = function () {};\n\n  Renderer.prototype = {\n    otag: \"{{\",\n    ctag: \"}}\",\n    pragmas: {},\n    buffer: [],\n    pragmas_implemented: {\n      \"IMPLICIT-ITERATOR\": true\n    },\n    context: {},\n\n    render: function (template, context, partials, in_recursion) {\n      // reset buffer & set context\n      if (!in_recursion) {\n        this.context = context;\n        this.buffer = []; // TODO: make this non-lazy\n      }\n\n      // fail fast\n      if (!this.includes(\"\", template)) {\n        if (in_recursion) {\n          return template;\n        } else {\n          this.send(template);\n          return;\n        }\n      }\n\n      // get the pragmas together\n      template = this.render_pragmas(template);\n\n      // render the template\n      var html = this.render_section(template, context, partials);\n\n      // render_section did not find any sections, we still need to render the tags\n      if (html === false) {\n        html = this.render_tags(template, context, partials, in_recursion);\n      }\n\n      if (in_recursion) {\n        return html;\n      } else {\n        this.sendLines(html);\n      }\n    },\n\n    /*\n      Sends parsed lines\n    */\n    send: function (line) {\n      if (line !== \"\") {\n        this.buffer.push(line);\n      }\n    },\n\n    sendLines: function (text) {\n      if (text) {\n        var lines = text.split(\"\\n\");\n        for (var i = 0; i < lines.length; i++) {\n          this.send(lines[i]);\n        }\n      }\n    },\n\n    /*\n      Looks for %PRAGMAS\n    */\n    render_pragmas: function (template) {\n      // no pragmas\n      if (!this.includes(\"%\", template)) {\n        return template;\n      }\n\n      var that = this;\n      var regex = this.getCachedRegex(\"render_pragmas\", function (otag, ctag) {\n        return new RegExp(otag + \"%([\\\\w-]+) ?([\\\\w]+=[\\\\w]+)?\" + ctag, \"g\");\n      });\n\n      return template.replace(regex, function (match, pragma, options) {\n        if (!that.pragmas_implemented[pragma]) {\n          throw({message:\n            \"This implementation of mustache doesn't understand the '\" +\n            pragma + \"' pragma\"});\n        }\n        that.pragmas[pragma] = {};\n        if (options) {\n          var opts = options.split(\"=\");\n          that.pragmas[pragma][opts[0]] = opts[1];\n        }\n        return \"\";\n        // ignore unknown pragmas silently\n      });\n    },\n\n    /*\n      Tries to find a partial in the curent scope and render it\n    */\n    render_partial: function (name, context, partials) {\n      name = trim(name);\n      if (!partials || partials[name] === undefined) {\n        throw({message: \"unknown_partial '\" + name + \"'\"});\n      }\n      if (!context || typeof context[name] != \"object\") {\n        return this.render(partials[name], context, partials, true);\n      }\n      return this.render(partials[name], context[name], partials, true);\n    },\n\n    /*\n      Renders inverted (^) and normal (#) sections\n    */\n    render_section: function (template, context, partials) {\n      if (!this.includes(\"#\", template) && !this.includes(\"^\", template)) {\n        // did not render anything, there were no sections\n        return false;\n      }\n\n      var that = this;\n\n      var regex = this.getCachedRegex(\"render_section\", function (otag, ctag) {\n        // This regex matches _the first_ section ({{#foo}}{{/foo}}), and captures the remainder\n        return new RegExp(\n          \"^([\\\\s\\\\S]*?)\" +         // all the crap at the beginning that is not {{*}} ($1)\n\n          otag +                    // {{\n          \"(\\\\^|\\\\#)\\\\s*(.+)\\\\s*\" + //  #foo (# == $2, foo == $3)\n          ctag +                    // }}\n\n          \"\\n*([\\\\s\\\\S]*?)\" +       // between the tag ($2). leading newlines are dropped\n\n          otag +                    // {{\n          \"\\\\/\\\\s*\\\\3\\\\s*\" +        //  /foo (backreference to the opening tag).\n          ctag +                    // }}\n\n          \"\\\\s*([\\\\s\\\\S]*)$\",       // everything else in the string ($4). leading whitespace is dropped.\n\n        \"g\");\n      });\n\n\n      // for each {{#foo}}{{/foo}} section do...\n      return template.replace(regex, function (match, before, type, name, content, after) {\n        // before contains only tags, no sections\n        var renderedBefore = before ? that.render_tags(before, context, partials, true) : \"\",\n\n        // after may contain both sections and tags, so use full rendering function\n            renderedAfter = after ? that.render(after, context, partials, true) : \"\",\n\n        // will be computed below\n            renderedContent,\n\n            value = that.find(name, context);\n\n        if (type === \"^\") { // inverted section\n          if (!value || Array.isArray(value) && value.length === 0) {\n            // false or empty list, render it\n            renderedContent = that.render(content, context, partials, true);\n          } else {\n            renderedContent = \"\";\n          }\n        } else if (type === \"#\") { // normal section\n          if (Array.isArray(value)) { // Enumerable, Let's loop!\n            renderedContent = that.map(value, function (row) {\n              return that.render(content, that.create_context(row), partials, true);\n            }).join(\"\");\n          } else if (that.is_object(value)) { // Object, Use it as subcontext!\n            renderedContent = that.render(content, that.create_context(value),\n              partials, true);\n          } else if (typeof value == \"function\") {\n            // higher order section\n            renderedContent = value.call(context, content, function (text) {\n              return that.render(text, context, partials, true);\n            });\n          } else if (value) { // boolean section\n            renderedContent = that.render(content, context, partials, true);\n          } else {\n            renderedContent = \"\";\n          }\n        }\n\n        return renderedBefore + renderedContent + renderedAfter;\n      });\n    },\n\n    /*\n      Replace {{foo}} and friends with values from our view\n    */\n    render_tags: function (template, context, partials, in_recursion) {\n      // tit for tat\n      var that = this;\n\n      var new_regex = function () {\n        return that.getCachedRegex(\"render_tags\", function (otag, ctag) {\n          return new RegExp(otag + \"(=|!|>|&|\\\\{|%)?([^#\\\\^]+?)\\\\1?\" + ctag + \"+\", \"g\");\n        });\n      };\n\n      var regex = new_regex();\n      var tag_replace_callback = function (match, operator, name) {\n        switch(operator) {\n        case \"!\": // ignore comments\n          return \"\";\n        case \"=\": // set new delimiters, rebuild the replace regexp\n          that.set_delimiters(name);\n          regex = new_regex();\n          return \"\";\n        case \">\": // render partial\n          return that.render_partial(name, context, partials);\n        case \"{\": // the triple mustache is unescaped\n        case \"&\": // & operator is an alternative unescape method\n          return that.find(name, context);\n        default: // escape the value\n          return escapeHTML(that.find(name, context));\n        }\n      };\n      var lines = template.split(\"\\n\");\n      for(var i = 0; i < lines.length; i++) {\n        lines[i] = lines[i].replace(regex, tag_replace_callback, this);\n        if (!in_recursion) {\n          this.send(lines[i]);\n        }\n      }\n\n      if (in_recursion) {\n        return lines.join(\"\\n\");\n      }\n    },\n\n    set_delimiters: function (delimiters) {\n      var dels = delimiters.split(\" \");\n      this.otag = this.escape_regex(dels[0]);\n      this.ctag = this.escape_regex(dels[1]);\n    },\n\n    escape_regex: function (text) {\n      // thank you Simon Willison\n      if (!arguments.callee.sRE) {\n        var specials = [\n          '/', '.', '*', '+', '?', '|',\n          '(', ')', '[', ']', '{', '}', '\\\\'\n        ];\n        arguments.callee.sRE = new RegExp(\n          '(\\\\' + specials.join('|\\\\') + ')', 'g'\n        );\n      }\n      return text.replace(arguments.callee.sRE, '\\\\$1');\n    },\n\n    /*\n      find `name` in current `context`. That is find me a value\n      from the view object\n    */\n    find: function (name, context) {\n      name = trim(name);\n\n      // Checks whether a value is thruthy or false or 0\n      function is_kinda_truthy(bool) {\n        return bool === false || bool === 0 || bool;\n      }\n\n      var value;\n\n      // check for dot notation eg. foo.bar\n      if (name.match(/([a-z_]+)\\./ig)) {\n        var childValue = this.walk_context(name, context);\n        if (is_kinda_truthy(childValue)) {\n          value = childValue;\n        }\n      } else {\n        if (is_kinda_truthy(context[name])) {\n          value = context[name];\n        } else if (is_kinda_truthy(this.context[name])) {\n          value = this.context[name];\n        }\n      }\n\n      if (typeof value == \"function\") {\n        return value.apply(context);\n      }\n      if (value !== undefined) {\n        return value;\n      }\n      // silently ignore unkown variables\n      return \"\";\n    },\n\n    walk_context: function (name, context) {\n      var path = name.split('.');\n      // if the var doesn't exist in current context, check the top level context\n      var value_context = (context[path[0]] != undefined) ? context : this.context;\n      var value = value_context[path.shift()];\n      while (value != undefined && path.length > 0) {\n        value_context = value;\n        value = value[path.shift()];\n      }\n      // if the value is a function, call it, binding the correct context\n      if (typeof value == \"function\") {\n        return value.apply(value_context);\n      }\n      return value;\n    },\n\n    // Utility methods\n\n    /* includes tag */\n    includes: function (needle, haystack) {\n      return haystack.indexOf(this.otag + needle) != -1;\n    },\n\n    // by @langalex, support for arrays of strings\n    create_context: function (_context) {\n      if (this.is_object(_context)) {\n        return _context;\n      } else {\n        var iterator = \".\";\n        if (this.pragmas[\"IMPLICIT-ITERATOR\"]) {\n          iterator = this.pragmas[\"IMPLICIT-ITERATOR\"].iterator;\n        }\n        var ctx = {};\n        ctx[iterator] = _context;\n        return ctx;\n      }\n    },\n\n    is_object: function (a) {\n      return a && typeof a == \"object\";\n    },\n\n    /*\n      Why, why, why? Because IE. Cry, cry cry.\n    */\n    map: function (array, fn) {\n      if (typeof array.map == \"function\") {\n        return array.map(fn);\n      } else {\n        var r = [];\n        var l = array.length;\n        for(var i = 0; i < l; i++) {\n          r.push(fn(array[i]));\n        }\n        return r;\n      }\n    },\n\n    getCachedRegex: function (name, generator) {\n      var byOtag = regexCache[this.otag];\n      if (!byOtag) {\n        byOtag = regexCache[this.otag] = {};\n      }\n\n      var byCtag = byOtag[this.ctag];\n      if (!byCtag) {\n        byCtag = byOtag[this.ctag] = {};\n      }\n\n      var regex = byCtag[name];\n      if (!regex) {\n        regex = byCtag[name] = generator(this.otag, this.ctag);\n      }\n\n      return regex;\n    }\n  };\n\n  return({\n    name: \"mustache.js\",\n    version: \"0.4.0\",\n\n    /*\n      Turns a template and view into HTML\n    */\n    to_html: function (template, view, partials, send_fun) {\n      var renderer = new Renderer();\n      if (send_fun) {\n        renderer.send = send_fun;\n      }\n      renderer.render(template, view || {}, partials);\n      if (!send_fun) {\n        return renderer.buffer.join(\"\\n\");\n      }\n    }\n  });\n}();\n/*!\n  ICanHaz.js -- by @HenrikJoreteg\n*/\n/*global  */\n(function () {\n    function trim(stuff) {\n        if (''.trim) return stuff.trim();\n        else return stuff.replace(/^\\s+/, '').replace(/\\s+$/, '');\n    }\n    var ich = {\n        VERSION: \"0.10\",\n        templates: {},\n        \n        // grab jquery or zepto if it's there\n        $: (typeof window !== 'undefined') ? window.jQuery || window.Zepto || null : null,\n        \n        // public function for adding templates\n        // can take a name and template string arguments\n        // or can take an object with name/template pairs\n        // We're enforcing uniqueness to avoid accidental template overwrites.\n        // If you want a different template, it should have a different name.\n        addTemplate: function (name, templateString) {\n            if (typeof name === 'object') {\n                for (var template in name) {\n                    this.addTemplate(template, name[template]);\n                }\n                return;\n            }\n            if (ich[name]) {\n                console.error(\"Invalid name: \" + name + \".\"); \n            } else if (ich.templates[name]) {\n                console.error(\"Template \\\"\" + name + \"  \\\" exists\");\n            } else {\n                ich.templates[name] = templateString;\n                ich[name] = function (data, raw) {\n                    data = data || {};\n                    var result = Mustache.to_html(ich.templates[name], data, ich.templates);\n                    return (ich.$ && !raw) ? ich.$(result) : result;\n                };\n            }\n        },\n        \n        // clears all retrieval functions and empties cache\n        clearAll: function () {\n            for (var key in ich.templates) {\n                delete ich[key];\n            }\n            ich.templates = {};\n        },\n        \n        // clears/grabs\n        refresh: function () {\n            ich.clearAll();\n            ich.grabTemplates();\n        },\n        \n        // grabs templates from the DOM and caches them.\n        // Loop through and add templates.\n        // Whitespace at beginning and end of all templates inside <script> tags will \n        // be trimmed. If you want whitespace around a partial, add it in the parent, \n        // not the partial. Or do it explicitly using <br/> or &nbsp;\n        grabTemplates: function () {        \n            var i, \n                scripts = document.getElementsByTagName('script'), \n                script,\n                trash = [];\n            for (i = 0, l = scripts.length; i < l; i++) {\n                script = scripts[i];\n                if (script && script.innerHTML && script.id && (script.type === \"text/html\" || script.type === \"text/x-icanhaz\")) {\n                    ich.addTemplate(script.id, trim(script.innerHTML));\n                    trash.unshift(script);\n                }\n            }\n            for (i = 0, l = trash.length; i < l; i++) {\n                trash[i].parentNode.removeChild(trash[i]);\n            }\n        }\n    };\n    \n    // Use CommonJS if applicable\n    if (typeof require !== 'undefined') {\n        module.exports = ich;\n    } else {\n        // else attach it to the window\n        window.ich = ich;\n    }\n    \n    if (typeof document !== 'undefined') {\n        if (ich.$) {\n            ich.$(function () {\n                ich.grabTemplates();\n            });\n        } else {\n            document.addEventListener('DOMContentLoaded', function () {\n                ich.grabTemplates();\n            }, true);\n        }\n    }\n        \n})();\n})();\n"]],"start1":0,"start2":0,"length1":0,"length2":16133}]],"length":16133}

{"ts":1357256345634,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**@license\n *|       __ _____                     ________                              __\n *|      / // _  /__ __ _____ ___ __ _/__  ___/__ ___ ______ __ __  __ ___  / /\n *|  __ / // // // // // _  // _// // / / // _  // _//     // //  \\/ // _ \\/ /\n *| /  / // // // // // ___// / / // / / // ___// / / / / // // /\\  // // / /__\n *| \\___//____ \\\\___//____//_/ _\\_  / /_//____//_/ /_/ /_//_//_/ /_/ \\__\\_\\___/\n *|           \\/              /____/                              version 0.4.22\n * http://terminal.jcubic.pl\n *\n * Licensed under GNU LGPL Version 3 license\n * Copyright (c) 2011-2012 Jakub Jankiewicz <http://jcubic.pl>\n *\n * Includes:\n *\n * Storage plugin Distributed under the MIT License\n * Copyright (c) 2010 Dave Schindler\n *\n * jQuery Timers licenced with the WTFPL\n * <http://jquery.offput.ca/every/>\n *\n * Cross-Browser Split 1.1.1\n * Copyright 2007-2012 Steven Levithan <stevenlevithan.com>\n * Available under the MIT License\n *\n * Date: Thu, 15 Nov 2012 07:12:21 +0000\n */\n\n/*\n\n     TODO:\n           add destroy method to terminal (cmd alrady have it)\n\n           add support for - $(...).each(function() { ... });\n\n           $.fn.pluginname = function(options) {\n             var settings = $.extend({}, $.fn.pluginname.defaultOptions, options);\n\n             return this.each(function() {\n                var $this = $(this);\n             });\n             $.fn.pluginname.defaultOptions = {\n             };\n          };\n\n          distinguish between paused and disabled\n          paused should block keydown in terminal it should disable command line\n          disable\n\n*/\n\n\n\n(function($, undefined) {\n    \"use strict\";\n\n    // map object to object\n    $.omap = function(o, fn) {\n        var result = {};\n        $.each(o, function(k, v) {\n            result[k] = fn.call(o, k, v);\n        });\n        return result;\n    };\n    // debug function\n    function get_stack(caller) {\n        \"use strict\";\n        if (caller) {\n            return [caller.toString().match(/.*\\n.*\\n/)].\n                concat(get_stack(caller.caller));\n        } else {\n            return [];\n        }\n    }\n    // ----------------------------------------\n    // START Storage plugin\n    // ----------------------------------------\n    // Private data\n    var isLS = typeof window.localStorage !== 'undefined';\n    // Private functions\n    function wls(n, v) {\n        var c;\n        if (typeof n === 'string' && typeof v === 'string') {\n            localStorage[n] = v;\n            return true;\n        } else if (typeof n === 'object' && typeof v === 'undefined') {\n            for (c in n) {\n                if (n.hasOwnProperty(c)) {\n                    localStorage[c] = n[c];\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    function wc(n, v) {\n        var dt, e, c;\n        dt = new Date();\n        dt.setTime(dt.getTime() + 31536000000);\n        e = '; expires=' + dt.toGMTString();\n        if (typeof n === 'string' && typeof v === 'string') {\n            document.cookie = n + '=' + v + e + '; path=/';\n            return true;\n        } else if (typeof n === 'object' && typeof v === 'undefined') {\n            for (c in n) {\n                if (n.hasOwnProperty(c)) {\n                    document.cookie = c + '=' + n[c] + e + '; path=/';\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    function rls(n) {\n        return localStorage[n];\n    }\n    function rc(n) {\n        var nn, ca, i, c;\n        nn = n + '=';\n        ca = document.cookie.split(';');\n        for (i = 0; i < ca.length; i++) {\n            c = ca[i];\n            while (c.charAt(0) === ' ') {\n                c = c.substring(1, c.length);\n            }\n            if (c.indexOf(nn) === 0) {\n                return c.substring(nn.length, c.length);\n            }\n        }\n        return null;\n    }\n    function dls(n) {\n        return delete localStorage[n];\n    }\n    function dc(n) {\n        return wc(n, '', -1);\n    }\n    /**\n    * Public API\n    * $.Storage.set(\"name\", \"value\")\n    * $.Storage.set({\"name1\":\"value1\", \"name2\":\"value2\", etc})\n    * $.Storage.get(\"name\")\n    * $.Storage.remove(\"name\")\n    */\n    $.extend({\n        Storage: {\n            set: isLS ? wls : wc,\n            get: isLS ? rls : rc,\n            remove: isLS ? dls : dc\n        }\n    });\n    // ----------------------------------------\n    // END Storage plugin\n    // ----------------------------------------\n    // START jQuery Timers\n    // ----------------------------------------\n    jQuery.fn.extend({\n        everyTime: function(interval, label, fn, times, belay) {\n            return this.each(function() {\n                jQuery.timer.add(this, interval, label, fn, times, belay);\n            });\n        },\n        oneTime: function(interval, label, fn) {\n            return this.each(function() {\n                jQuery.timer.add(this, interval, label, fn, 1);\n            });\n        },\n        stopTime: function(label, fn) {\n            return this.each(function() {\n                jQuery.timer.remove(this, label, fn);\n            });\n        }\n    });\n\n    jQuery.extend({\n        timer: {\n            guid: 1,\n            global: {},\n            regex: /^([0-9]+)\\s*(.*s)?$/,\n            powers: {\n                // Yeah this is major overkill...\n                'ms': 1,\n                'cs': 10,\n                'ds': 100,\n                's': 1000,\n                'das': 10000,\n                'hs': 100000,\n                'ks': 1000000\n            },\n            timeParse: function(value) {\n                if (value === undefined || value === null) {\n                    return null;\n                }\n                var result = this.regex.exec(jQuery.trim(value.toString()));\n                if (result[2]) {\n                    var num = parseInt(result[1], 10);\n                    var mult = this.powers[result[2]] || 1;\n                    return num * mult;\n                } else {\n                    return value;\n                }\n            },\n            add: function(element, interval, label, fn, times, belay) {\n                var counter = 0;\n\n                if (jQuery.isFunction(label)) {\n                    if (!times) {\n                        times = fn;\n                    }\n                    fn = label;\n                    label = interval;\n                }\n\n                interval = jQuery.timer.timeParse(interval);\n\n                if (typeof interval !== 'number' ||\n                    isNaN(interval) ||\n                    interval <= 0) {\n                    return;\n                }\n                if (times && times.constructor !== Number) {\n                    belay = !!times;\n                    times = 0;\n                }\n\n                times = times || 0;\n                belay = belay || false;\n\n                if (!element.$timers) {\n                    element.$timers = {};\n                }\n                if (!element.$timers[label]) {\n                    element.$timers[label] = {};\n                }\n                fn.$timerID = fn.$timerID || this.guid++;\n\n                var handler = function() {\n                    if (belay && handler.inProgress) {\n                        return;\n                    }\n                    handler.inProgress = true;\n                    if ((++counter > times && times !== 0) ||\n                        fn.call(element, counter) === false) {\n                        jQuery.timer.remove(element, label, fn);\n                    }\n                    handler.inProgress = false;\n                };\n\n                handler.$timerID = fn.$timerID;\n\n                if (!element.$timers[label][fn.$timerID]) {\n                    element.$timers[label][fn.$timerID] = window.setInterval(handler, interval);\n                }\n\n                if (!this.global[label]) {\n                    this.global[label] = [];\n                }\n                this.global[label].push(element);\n\n            },\n            remove: function(element, label, fn) {\n                var timers = element.$timers, ret;\n\n                if (timers) {\n\n                    if (!label) {\n                        for (var lab in timers) {\n                            if (timers.hasOwnProperty(lab)) {\n                                this.remove(element, lab, fn);\n                            }\n                        }\n                    } else if (timers[label]) {\n                        if (fn) {\n                            if (fn.$timerID) {\n                                window.clearInterval(timers[label][fn.$timerID]);\n                                delete timers[label][fn.$timerID];\n                            }\n                        } else {\n                            for (var _fn in timers[label]) {\n                                if (timers[label].hasOwnProperty(_fn)) {\n                                    window.clearInterval(timers[label][_fn]);\n                                    delete timers[label][_fn];\n                                }\n                            }\n                        }\n\n                        for (ret in timers[label]) {\n                            if (timers[label].hasOwnProperty(ret)) {\n                                break;\n                            }\n                        }\n                        if (!ret) {\n                            ret = null;\n                            delete timers[label];\n                        }\n                    }\n\n                    for (ret in timers) {\n                        if (timers.hasOwnProperty(ret)) {\n                            break;\n                        }\n                    }\n                    if (!ret) {\n                        element.$timers = null;\n                    }\n                }\n            }\n        }\n    });\n\n    if (jQuery.browser.msie) {\n        jQuery(window).one('unload', function() {\n            var global = jQuery.timer.global;\n            for (var label in global) {\n                if (global.hasOwnProperty(label)) {\n                    var els = global[label], i = els.length;\n                    while (--i) {\n                        jQuery.timer.remove(els[i], label);\n                    }\n                }\n            }\n        });\n    }\n    // ----------------------------------------\n    // START CROSS BROWSER SPLIT\n    // ----------------------------------------\n    \n    (function(undef) {\n\n        // prevent double include\n\n        if (!String.prototype.split.toString().match(/\\[native/)) {\n            return;\n        }\n\n        var nativeSplit = String.prototype.split,\n        compliantExecNpcg = /()??/.exec(\"\")[1] === undef, // NPCG: nonparticipating capturing group\n        self;\n\n        self = function (str, separator, limit) {\n            // If `separator` is not a regex, use `nativeSplit`\n            if (Object.prototype.toString.call(separator) !== \"[object RegExp]\") {\n                return nativeSplit.call(str, separator, limit);\n            }\n            var output = [],\n            flags = (separator.ignoreCase ? \"i\" : \"\") +\n                (separator.multiline  ? \"m\" : \"\") +\n                (separator.extended   ? \"x\" : \"\") + // Proposed for ES6\n                (separator.sticky     ? \"y\" : \"\"), // Firefox 3+\n                lastLastIndex = 0,\n            // Make `global` and avoid `lastIndex` issues by working with a copy\n            separator2, match, lastIndex, lastLength;\n            separator = new RegExp(separator.source, flags + \"g\");\n            str += \"\"; // Type-convert\n            if (!compliantExecNpcg) {\n                // Doesn't need flags gy, but they don't hurt\n                separator2 = new RegExp(\"^\" + separator.source + \"$(?!\\\\s)\", flags);\n            }\n            /* Values for `limit`, per the spec:\n         * If undefined: 4294967295 // Math.pow(2, 32) - 1\n         * If 0, Infinity, or NaN: 0\n         * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;\n         * If negative number: 4294967296 - Math.floor(Math.abs(limit))\n         * If other: Type-convert, then use the above rules\n         */\n            // ? Math.pow(2, 32) - 1 : ToUint32(limit)\n            limit = limit === undef ? -1 >>> 0 : limit >>> 0;\n            while (match = separator.exec(str)) {\n                    // `separator.lastIndex` is not reliable cross-browser\n                    lastIndex = match.index + match[0].length;\n                    if (lastIndex > lastLastIndex) {\n                        output.push(str.slice(lastLastIndex, match.index));\n                        // Fix browsers whose `exec` methods don't consistently return `undefined` for\n                        // nonparticipating capturing groups\n                        if (!compliantExecNpcg && match.length > 1) {\n                            match[0].replace(separator2, function () {\n                                for (var i = 1; i < arguments.length - 2; i++) {\n                                    if (arguments[i] === undef) {\n                                        match[i] = undef;\n                                    }\n                                }\n                            });\n                        }\n                        if (match.length > 1 && match.index < str.length) {\n                            Array.prototype.push.apply(output, match.slice(1));\n                        }\n                        lastLength = match[0].length;\n                        lastLastIndex = lastIndex;\n                        if (output.length >= limit) {\n                            break;\n                        }\n                    }\n                    if (separator.lastIndex === match.index) {\n                        separator.lastIndex++; // Avoid an infinite loop\n                    }\n                }\n            if (lastLastIndex === str.length) {\n                if (lastLength || !separator.test(\"\")) {\n                    output.push(\"\");\n                }\n            } else {\n                output.push(str.slice(lastLastIndex));\n            }\n            return output.length > limit ? output.slice(0, limit) : output;\n        };\n\n        // For convenience\n        String.prototype.split = function (separator, limit) {\n            return self(this, separator, limit);\n        };\n\n        return self;\n\n    })();\n\n    // -----------------------------------------------------------------------\n    /*\n    function decodeHTML(str) {\n        if (typeof str === 'string') {\n            str = str.replace(/&amp;/g, '&');\n            str = str.replace(/&lt;/g, '<').replace(/&gt;/g, '>');\n            str = str.replace(/&#09;/g, '\\t');\n            str = str.replace(/<br\\/?>/g, '\\n').replace(/&nbsp;/g, ' ');\n            return str;\n        } else {\n            return '';\n        }\n    }\n    */\n    //split string to array of strings with the same length\n    function str_parts(str, length) {\n        var result = [];\n        var len = str.length;\n        if (len < length) {\n            return [str];\n        }\n        for (var i = 0; i < len; i += length) {\n            result.push(str.substring(i, i + length));\n        }\n        return result;\n    }\n\n\n    // -----------------------------------------------------------------------\n\n    function skipFormattingCount(string) {\n        return $('<div>' + $.terminal.strip(string) + '</div>').text().length;\n    }\n\n    // -----------------------------------------------------------------------\n    function formattingCount(string) {\n        return string.length - skipFormattingCount(string);\n    }\n\n    // -----------------------------------------------------------------------\n    // CYCLE DATA STRUCTURE\n    // -----------------------------------------------------------------------\n    function Cycle(init) {\n        var data = init ? [init] : [];\n        var pos = 0;\n        $.extend(this, {\n            rotate: function() {\n                if (data.length === 1) {\n                    return data[0];\n                } else {\n                    if (pos === data.length - 1) {\n                        pos = 0;\n                    } else {\n                        ++pos;\n                    }\n                    return data[pos];\n                }\n            },\n            length: function() {\n                return data.length;\n            },\n            set: function(item) {\n                for (var i = data.length; i--;) {\n                    if (data[i] === item) {\n                        pos = i;\n                        return;\n                    }\n                }\n                this.append(item);\n            },\n            front: function() {\n                return data[pos];\n            },\n            append: function(item) {\n                data.push(item);\n            }\n        });\n    }\n    // -----------------------------------------------------------------------\n    // :: BCYCLE DATA STRUCTURE // Two way cycle\n    // -----------------------------------------------------------------------\n    function BCycle(init) {\n        var data = init instanceof Array ? init : init ? [init] : [];\n        var pos = 0;\n        $.extend(this, {\n            left: function() {\n                if (pos === 0) {\n                    pos = data.length - 1;\n                } else {\n                    --pos;\n                }\n                return data[pos];\n            },\n            right: function() {\n                if (pos === data.length - 1) {\n                    pos = 0;\n                } else {\n                    ++pos;\n                }\n                return data[pos];\n            },\n            current: function() {\n                return data[pos];\n            },\n            data: function() {\n                return data;\n            },\n            length: function() {\n                return data.length;\n            },\n            reset: function() {\n                pos = 0;\n            },\n            append: function(item) {\n                data.push(item);\n                this.reset();\n            }\n        });\n    }\n    // -----------------------------------------------------------------------\n    // :: STACK DATA STRUCTURE\n    // -----------------------------------------------------------------------\n    function Stack(init) {\n        var data = init ? [init] : [];\n        $.extend(this, {\n            size: function() {\n                return data.length;\n            },\n            pop: function() {\n                if (data.length === 0) {\n                    return null;\n                } else {\n                    var value = data[data.length - 1];\n                    data = data.slice(0, data.length - 1);\n                    return value;\n                }\n            },\n            push: function(value) {\n                data = data.concat([value]);\n                return value;\n            },\n            top: function() {\n                return data.length > 0 ? data[data.length - 1] : null;\n            }\n        });\n    }\n    // serialize object myself (biwascheme or prototype library do something\n    // wiked with JSON serialization for Arrays)\n    $.json_stringify = function(object, level) {\n        var result = '', i;\n        level = level === undefined ? 1 : level;\n        var type = typeof object;\n        switch (type) {\n        case 'function':\n            result += object;\n            break;\n        case 'boolean':\n            result += object ? 'true' : 'false';\n            break;\n        case 'object':\n            if (object === null) {\n                result += 'null';\n            } else if (object instanceof Array) {\n                result += '[';\n                var len = object.length;\n                for (i = 0; i < len - 1; ++i) {\n                    result += $.json_stringify(object[i], level + 1);\n                }\n                result += $.json_stringify(object[len - 1], level + 1) + ']';\n            } else {\n                result += '{';\n                for (var property in object) {\n                    if (object.hasOwnProperty(property)) {\n                        result += '\"' + property + '\":' +\n                            $.json_stringify(object[property], level + 1);\n                    }\n                }\n                result += '}';\n            }\n            break;\n        case 'string':\n            var str = object;\n            var repl = {\n                '\\\\\\\\': '\\\\\\\\',\n                '\"': '\\\\\"',\n                '/': '\\\\/',\n                '\\\\n': '\\\\n',\n                '\\\\r': '\\\\r',\n                '\\\\t': '\\\\t'};\n            for (i in repl) {\n                if (repl.hasOwnProperty(i)) {\n                    str = str.replace(new RegExp(i, 'g'), repl[i]);\n                }\n            }\n            result += '\"' + str + '\"';\n            break;\n        case 'number':\n            result += String(object);\n            break;\n        }\n        result += (level > 1 ? ',' : '');\n        // quick hacks below\n        if (level === 1) {\n            // fix last comma\n            result = result.replace(/,([\\]}])/g, '$1');\n        }\n        // fix comma before array or object\n        return result.replace(/([\\[{]),/g, '$1');\n    };\n    // -----------------------------------------------------------------------\n    // :: HISTORY CLASS\n    // -----------------------------------------------------------------------\n    function History(name) {\n        var enabled = true;\n        if (typeof name === 'string' && name !== '') {\n            name += '_';\n        }\n        var data = $.Storage.get(name + 'commands');\n        var bc = new BCycle(data ? eval('(' + data + ')') : ['']);\n\n        $.extend(this, {\n            append: function(item) {\n                if (enabled) {\n                    bc.append(item);\n                    $.Storage.set(name + 'commands', $.json_stringify(bc.data()));\n                }\n            },\n            data: function() {\n                return bc.data();\n            },\n            next: function() {\n                return bc.right();\n            },\n            last: function() {\n                bc.reset();\n            },\n            previous: function() {\n                return bc.left();\n            },\n            clear: function() {\n                bc = new BCycle();\n                $.Storage.remove(name + 'commands');\n            },\n            enable: function() {\n                enabled = true;\n            },\n            disable: function() {\n                enabled = false;\n            }\n        });\n    }\n    // -----------------------------------------------------------------------\n    // :: COMMAND LINE PLUGIN\n    // -----------------------------------------------------------------------\n    $.fn.cmd = function(options) {\n        var self = this;\n        self.addClass('cmd');\n        self.append('<span class=\"prompt\"></span><span></span>' +\n                    '<span class=\"cursor\">&nbsp;</span><span></span>');\n        var clip = $('<textarea/>').addClass('clipboard').appendTo(self);\n        if (options.width) {\n            self.width(options.width);\n        }\n        var num_chars; // calculates by draw_prompt\n        var prompt_len;\n        var reverse_search = false;\n        var reverse_search_string = '';\n        var reverse_search_position = null;\n        var backup_prompt;\n        var mask = options.mask || false;\n        var command = '';\n        var position = 0;\n        var prompt;\n        var enabled = options.enabled;\n        var name, history;\n        var cursor = self.find('.cursor');\n\n        function blink(i) {\n            cursor.toggleClass('inverted');\n        }\n        function draw_reverse_prompt() {\n            prompt = \"(reverse-i-search)`\" + reverse_search_string + \"': \";\n            draw_prompt();\n        }\n        function clear_reverse_state() {\n            prompt = backup_prompt;\n            reverse_search = false;\n            reverse_search_position = null;\n            reverse_search_string = '';\n        }\n        // if next is not defined or false it search for first item from the end\n        // if true it search for next item\n        function reverse_history_search(next) {\n            var history_data = history.data();\n            var regex = new RegExp('^' + reverse_search_string);\n            var len = history_data.length;\n            if (next && reverse_search_position > 0) {\n                len -= reverse_search_position;\n            }\n            for (var i=len; i--;) {\n                if (regex.test(history_data[i])) {\n                    reverse_search_position = history_data.length - i;\n                    position = 0;\n                    self.set(history_data[i], true);\n                    redraw();\n                    break;\n                }\n            }\n        }\n\n        function change_num_chars() {\n            var W = self.width();\n            var w = cursor.innerWidth();\n            num_chars = Math.floor(W / w);\n        }\n        function str_repeat(str, n) {\n            var result = '';\n            for (var i = n; i--;) {\n                result += str;\n            }\n            return result;\n        }\n        function get_splited_command_line(string) {\n            /*\n            string = str_repeat('x', prompt_len) + string;\n            var result = $.terminal.split_equal(string);\n            result[0] = result[0].substring(prompt_len);\n            return result;\n            */\n            var first = string.substring(0, num_chars - prompt_len);\n            var rest = string.substring(num_chars - prompt_len);\n            return [first].concat(str_parts(rest, num_chars));\n        }\n        var redraw = (function(self) {\n            var before = cursor.prev();\n            var after = cursor.next();\n            function draw_cursor_line(string, position) {\n                var len = string.length;\n                if (position === len) {\n                    before.html($.terminal.encode(string));\n                    cursor.html('&nbsp;');\n                    after.html('');\n                } else if (position === 0) {\n                    before.html('');\n                    //fix for tilda in IE\n                    cursor.html($.terminal.encode(string.slice(0, 1)));\n                    //cursor.html($.terminal.encode(string[0]));\n                    after.html($.terminal.encode(string.slice(1)));\n                } else {\n                    var before_str = $.terminal.encode(string.slice(0, position));\n                    before.html(before_str);\n                    //fix for tilda in IE\n                    var c = string.slice(position, position + 1);\n                    //cursor.html(string[position]));\n                    cursor.html(c === ' ' ? '&nbsp;' : $.terminal.encode(c));\n                    if (position === string.length - 1) {\n                        after.html('');\n                    } else {\n                        after.html($.terminal.encode(string.slice(position + 1)));\n                    }\n                }\n            }\n            function div(string) {\n                return '<div>' + $.terminal.encode(string) + '</div>';\n            }\n            function lines_after(lines) {\n                var last_ins = after;\n                $.each(lines, function(i, line) {\n                    last_ins = $(div(line)).insertAfter(last_ins).\n                        addClass('clear');\n                });\n            }\n            function lines_before(lines) {\n                $.each(lines, function(i, line) {\n                    before.before(div(line));\n                });\n            }\n            var count = 0;\n            return function() {\n                var string = mask ? command.replace(/./g, '*') : command;\n                var i, first_len;\n                self.find('div').remove();\n                before.html('');\n                // long line\n                if (string.length > num_chars - prompt_len - 1 ||\n                    string.match(/\\n/)) {\n                    var array;\n                    var tabs = string.match(/\\t/g);\n                    var tabs_rm = tabs ? tabs.length * 3 : 0;\n                    //quick tabulation hack\n                    if (tabs) {\n                        string = string.replace(/\\t/g, '\\x00\\x00\\x00\\x00');\n                    }\n                    // command contain new line characters\n                    if (string.match(/\\n/)) {\n                        var tmp = string.split(\"\\n\");\n                        first_len = num_chars - prompt_len - 1;\n                        // empty character after each line\n                        for (i=0; i<tmp.length-1; ++i) {\n                            tmp[i] += ' ';\n                        }\n                        // split first line\n                        if (tmp[0].length > first_len) {\n                            array = [tmp[0].substring(0, first_len)];\n                            array = array.concat(str_parts(tmp[0].substring(first_len), num_chars));\n                        } else {\n                            array = [tmp[0]];\n                        }\n                        // process rest of the lines\n                        for (i=1; i<tmp.length; ++i) {\n                            if (tmp[i].length > num_chars) {\n                                array = array.concat(str_parts(tmp[i], num_chars));\n                            } else {\n                                array.push(tmp[i]);\n                            }\n                        }\n                    } else {\n                        array = get_splited_command_line(string);\n                    }\n                    if (tabs) {\n                        array = $.map(array, function(line) {\n                            return line.replace(/\\x00\\x00\\x00\\x00/g, '\\t');\n                        });\n                    }\n                    first_len = array[0].length;\n                    //cursor in first line\n                    if (position < first_len) {\n                        draw_cursor_line(array[0], position);\n                        lines_after(array.slice(1));\n                    } else if (position === first_len) {\n                        before.before(div(array[0]));\n                        draw_cursor_line(array[1], 0);\n                        lines_after(array.slice(2));\n                    } else {\n                        var num_lines = array.length;\n                        var offset = 0;\n                        if (position < first_len) {\n                            draw_cursor_line(array[0], position);\n                            lines_after(array.slice(1));\n                        } else if (position === first_len) {\n                            before.before(div(array[0]));\n                            draw_cursor_line(array[1], 0);\n                            lines_after(array.slice(2));\n                        } else {\n                            var last = array.slice(-1)[0];\n                            var from_last = string.length - position;\n                            var last_len = last.length;\n                            var pos = 0;\n                            if (from_last <= last_len) {\n                                lines_before(array.slice(0, -1));\n                                pos = last_len === from_last ? 0 : last_len-from_last;\n                                draw_cursor_line(last, pos+tabs_rm);\n                            } else {\n                                // in the middle\n                                if (num_lines === 3) {\n                                    before.before('<div>' + $.terminal.encode(array[0]) +\n                                                  '</div>');\n                                    draw_cursor_line(array[1], position-first_len-1);\n                                    after.after('<div class=\"clear\">' +\n                                                $.terminal.encode(array[2]) +\n                                                '</div>');\n                                } else {\n                                    // more lines, cursor in the middle\n                                    var line_index;\n                                    var current;\n                                    pos = position;\n                                    for (i=0; i<array.length; ++i) {\n                                        var current_len = array[i].length;\n                                        if (pos > current_len) {\n                                            pos -= current_len;\n                                        } else {\n                                            break;\n                                        }\n                                    }\n                                    current = array[i];\n                                    line_index = i;\n                                    // cursor on first character in line\n                                    if (pos === current.length) {\n                                        pos = 0;\n                                        current = array[++line_index];\n                                    }\n                                    draw_cursor_line(current, pos);\n                                    lines_before(array.slice(0, line_index));\n                                    lines_after(array.slice(line_index+1));\n                                }\n                            }\n                        }\n                    }\n                } else {\n                     if (string === '') {\n                         before.html('');\n                         cursor.html('&nbsp;');\n                         after.html('');\n                     } else {\n                         draw_cursor_line(string, position);\n                     }\n                }\n            };\n        })(self);\n\n        var draw_prompt = (function() {\n            var prompt_node = self.find('.prompt');\n            return function() {\n                if (typeof prompt === 'string') {\n                    prompt_len = skipFormattingCount(prompt);\n                    prompt_node.html($.terminal.format(prompt));\n                } else {\n                    prompt(function(string) {\n                        prompt_len = skipFormattingCount(string);\n                        prompt_node.html($.terminal.format(string));\n                    });\n                }\n                //change_num_chars();\n            };\n        })();\n        // paste content to terminal using hidden textarea\n        function paste() {\n            clip.focus();\n            //wait until Browser insert text to textarea\n            self.oneTime(1, function() {\n                self.insert(clip.val());\n                clip.blur().val('');\n            });\n        }\n        function keydown_event(e) {\n            if (options.keydown && options.keydown(e) === false) {\n                return false;\n            }\n            if (enabled) {\n                var pos, len, result;\n                // arrows / Home / End / ENTER\n                if (reverse_search && (e.which === 35 || e.which === 36 ||\n                                       e.which === 37 || e.which === 38 ||\n                                       e.which === 39 || e.which === 40 ||\n                                       e.which === 66 || e.which === 13 ||\n                                       e.which === 27)) {\n                    clear_reverse_state();\n                    draw_prompt();\n                    if (e.which === 27) { // ESC\n                        command = '';\n                    }\n                    redraw();\n                    // finish reverse search and execute normal event handler\n                    keydown_event.call(this, e);\n                } else if (e.altKey) {\n                    // Chrome on Windows set ctrlKey and altKey for alt\n                    // need to check for alt first\n                    //if (e.which === 18) { // press ALT\n                    if (e.which === 68) { //ALT+D\n                        var regex  = /[^ ]+ |[^ ]+$/;\n                        self.set(command.slice(0, position) +\n                                 command.slice(position).replace(regex, ''),\n                                 true);\n                        // chrome jump to address bar\n                        return false;\n                    }\n                    return true;\n                } else if (e.keyCode === 13) { //enter\n                    if ((history && command) &&\n                        ((options.historyFilter &&\n                         options.historyFilter(command)) ||\n                         !options.historyFilter)) {\n                        if (history.data().slice(-1)[0] !== command) {\n                            history.append(command);\n                        }\n                    }\n                    history.last();\n                    var tmp = command;\n                    self.set('');\n                    if (options.commands) {\n                        options.commands(tmp);\n                    }\n                    if (typeof prompt === 'function') {\n                        draw_prompt();\n                    }\n                } else if (e.which === 32) { //space\n                    if (reverse_search) {\n                        reverse_search_string += ' ';\n                        draw_reverse_prompt();\n                    } else {\n                        self.insert(' ');\n                    }\n                } else if (e.which === 8) { //backspace\n                    if (reverse_search) {\n                        reverse_search_string = reverse_search_string.slice(0, -1);\n                        draw_reverse_prompt();\n                    } else {\n                        if (command !== '' && position > 0) {\n                            command = command.slice(0, position - 1) +\n                                command.slice(position, command.length);\n                            --position;\n                            redraw();\n                        }\n                    }\n                } else if (e.which === 9 && !(e.ctrlKey || e.altKey)) { // TAB\n                    self.insert('\\t');\n                } else if (e.which === 46) {\n                    //DELETE\n                    if (command !== '' && position < command.length) {\n                        command = command.slice(0, position) +\n                            command.slice(position + 1, command.length);\n                        redraw();\n                    }\n                    return true;\n                } else if (history && e.which === 38 ||\n                           (e.which === 80 && e.ctrlKey)) {\n                    //UP ARROW or CTRL+P\n                    self.set(history.previous());\n                } else if (history && e.which === 40 ||\n                           (e.which === 78 && e.ctrlKey)) {\n                    //DOWN ARROW or CTRL+N\n                    self.set(history.next());\n                } else if (e.which === 37 ||\n                           (e.which === 66 && e.ctrlKey)) {\n                    //CTRL+LEFT ARROW or CTRL+B\n                    if (e.ctrlKey && e.which !== 66) {\n                        len = position - 1;\n                        pos = 0;\n                        if (command[len] === ' ') {\n                            --len;\n                        }\n                        for (var i = len; i > 0; --i) {\n                            if (command[i] === ' ' && command[i+1] !== ' ') {\n                                pos = i + 1;\n                                break;\n                            } else if (command[i] === '\\n' && command[i+1] !== '\\n') {\n                                pos = i;\n                                break;\n                            }\n                        }\n                        self.position(pos);\n                    } else {\n                        //LEFT ARROW or CTRL+B\n                        if (position > 0) {\n                            --position;\n                            redraw();\n                        }\n                    }\n                } else if (e.which === 82 && e.ctrlKey) { // CTRL+R\n                    if (reverse_search) {\n                        reverse_history_search(true);\n                    } else {\n                        backup_prompt = prompt;\n                        draw_reverse_prompt();\n                        command = '';\n                        redraw();\n                        reverse_search = true;\n                    }\n                } else if (e.which === 39 ||\n                           (e.which === 70 && e.ctrlKey)) {\n                    //RIGHT ARROW OR CTRL+F\n                    if (e.ctrlKey && e.which !== 70) {\n                        // jump to beginig or end of the word\n                        if (command[position] === ' ') {\n                            ++position;\n                        }\n                        var match = command.slice(position).match(/\\S[\\n\\s]{2,}|[\\n\\s]+\\S?/);\n                        if (!match || match[0].match(/^\\s+$/)) {\n                            position = command.length;\n                        } else {\n                            if (match[0][0] !== ' ') {\n                                position += match.index + 1;\n                            } else {\n                                position += match.index + match[0].length - 1;\n                                if (match[0][match[0].length-1] !== ' ') {\n                                    --position;\n                                }\n                            }\n                        }\n                        redraw();\n                    } else {\n                        if (position < command.length) {\n                            ++position;\n                            redraw();\n                        }\n                    }\n                } else if (e.which === 123) { //F12 - Allow Firebug\n                    return true;\n                } else if (e.which === 36) { //HOME\n                    self.position(0);\n                } else if (e.which === 35) {\n                    //END\n                    self.position(command.length);\n                } else if (e.ctrlKey || e.metaKey) {\n                    if (e.shiftKey) { // CTRL+SHIFT+??\n                        if (e.which === 84) {\n                            //CTRL+SHIFT+T open closed tab\n                            return true;\n                        }\n                    //} else if (e.altKey) { //ALT+CTRL+??\n                    } else {\n                        //NOTE: in opera charCode is undefined\n                        if (e.which === 65) {\n                            //CTRL+A\n                            self.position(0);\n                        } else if (e.which === 69) {\n                            //CTRL+E\n                            self.position(command.length);\n                        } else if (e.which === 88 || e.which === 67 ||\n                                   e.which === 87 || e.which === 84) {\n                            //CTRL+X CTRL+C CTRL+W CTRL+T\n                            return true;\n                        } else if (e.which === 86) {\n                            //CTRL+V\n                            paste();\n                            return true;\n                        } else if (e.which === 75) {\n                            //CTRL+K\n                            if (position === 0) {\n                                self.set('');\n                            } else if (position !== command.length) {\n                                self.set(command.slice(0, position));\n                            }\n                        } else if (e.which === 85) { // CTRL+U\n                            self.set(command.slice(position, command.length));\n                            self.position(0);\n                        } else if (e.which === 17) { //CTRL+TAB switch tab\n                            return true;\n                        }\n                    }\n                } else {\n                    return true;\n                }\n                return false;\n            } /*else {\n                if ((e.altKey && e.which === 68) ||\n                    (e.ctrlKey &&\n                     $.inArray(e.which, [65, 66, 68, 69, 80, 78, 70]) > -1) ||\n                    // 68 === D\n                    [35, 36, 37, 38, 39, 40].has(e.which)) {\n                    return false;\n                }\n            } */\n        }\n        $.extend(self, {\n            name: function(string) {\n                if (string !== undefined) {\n                    name = string;\n                    history = new History(string);\n                } else {\n                    return name;\n                }\n            },\n            history: function() {\n                return history;\n            },\n            set: function(string, stay) {\n                if (string !== undefined) {\n                    command = string;\n                    if (!stay) {\n                        position = command.length;\n                    }\n                    redraw();\n                    if (typeof options.onCommandChange === 'function') {\n                        options.onCommandChange(command);\n                    }\n                }\n            },\n            insert: function(string, stay) {\n                if (position === command.length) {\n                    command += string;\n                } else if (position === 0) {\n                    command = string + command;\n                } else {\n                    command = command.slice(0, position) +\n                        string + command.slice(position);\n                }\n                if (!stay) {\n                    position += string.length;\n                }\n                redraw();\n                if (typeof options.onCommandChange === 'function') {\n                    options.onCommandChange(command);\n                }\n            },\n            get: function() {\n                return command;\n            },\n            commands: function(commands) {\n                if (commands) {\n                    options.commands = commands;\n                } else {\n                    return commands;\n                }\n            },\n            destroy: function() {\n                $(document.documentElement).unbind('.commandline');\n                self.find('.prompt').remove();\n            },\n            prompt: function(user_prompt) {\n                if (user_prompt === undefined) {\n                    return prompt;\n                } else {\n                    if (typeof user_prompt === 'string' ||\n                        typeof user_prompt === 'function') {\n                        prompt = user_prompt;\n                    } else {\n                        throw 'prompt must be a function or string';\n                    }\n                    draw_prompt();\n                    // we could check if command is longer then numchars-new prompt\n                    redraw();\n                }\n            },\n            position: function(n) {\n                if (typeof n === 'number') {\n                    position = n < 0 ? 0 : n > command.length ? command.length : n;\n                    redraw();\n                } else {\n                    return position;\n                }\n            },\n            visible: (function() {\n                var visible = self.visible;\n                return function() {\n                    visible.apply(self, []);\n                    redraw();\n                    draw_prompt();\n                };\n            })(),\n            show: (function() {\n                var show = self.show;\n                return function() {\n                    show.apply(self, []);\n                    redraw();\n                    draw_prompt();\n                };\n            })(),\n            resize: function(num) {\n                if (num) {\n                    num_chars = num;\n                } else {\n                    change_num_chars();\n                }\n                redraw();\n            },\n            enable: function() {\n                if (!enabled) {\n                    cursor.addClass('inverted');\n                    self.everyTime(500, 'blink', blink);\n                    enabled = true;\n                }\n            },\n            isenabled: function() {\n                return enabled;\n            },\n            disable: function() {\n                if (enabled) {\n                    self.stopTime('blink', blink);\n                    cursor.removeClass('inverted');\n                    enabled = false;\n                }\n            },\n            mask: function(display) {\n                if (typeof display === 'boolean') {\n                    mask = display;\n                    redraw();\n                } else {\n                    return mask;\n                }\n            }\n        });\n        // INIT\n        self.name(options.name || '');\n        prompt = options.prompt || '> ';\n        draw_prompt();\n        if (options.enabled === undefined || options.enabled === true) {\n            self.enable();\n        }\n        // Keystrokes\n        //document.documentElement\n        var object;\n        if ($.browser.msie) {\n            object = document.documentElement;\n        } else {\n            object = window;\n        }\n        $(object).keypress(function(e) {\n            var result;\n            if (e.ctrlKey && e.which === 99) {\n                return true;\n            }\n            if (!reverse_search && options.keypress) {\n                result = options.keypress(e);\n            }\n            if (result === undefined || result) {\n                if (enabled) {\n                    if ($.inArray(e.which, [38, 32, 13, 0, 8]) > -1 &&\n                        e.keyCode !== 123 && // for F12 which === 0\n                        //!(e.which === 40 && e.shiftKey ||\n                        !(e.which === 38 && e.shiftKey)) {\n                        return false;\n                    } else if (!e.ctrlKey && !(e.altKey && e.which === 100)) {\n                        // TODO: this should be in one statement\n                        if (reverse_search) {\n                            reverse_search_string += String.fromCharCode(e.which);\n                            draw_reverse_prompt();\n                            reverse_history_search();\n                        } else {\n                            self.insert(String.fromCharCode(e.which));\n                        }\n                        return false;\n                    } else if (e.altKey) {\n                        if (reverse_search) {\n                            reverse_search_string += String.fromCharCode(e.which);\n                            draw_reverse_prompt();\n                            reverse_history_search();\n                        } else {\n                            self.insert(String.fromCharCode(e.which));\n                        }\n                    }\n                }\n            } else {\n                return result;\n            }\n        }).keydown(keydown_event);\n        // characters\n        return self;\n    };\n\n    // -------------------------------------------------------------------------\n    // :: TOOLS\n    // -------------------------------------------------------------------------\n\n    var format_split_re = /(\\[\\[[gbius]*;[^;]*;[^\\]]*\\](?:[^\\]\\[]*|\\[*(?!\\[)[^\\]]*\\][^\\]]*)\\])/g;\n    var format_re = /\\[\\[([gbius]*);([^;]*);([^;\\]]*;|[^\\]]*);?([^\\]]*)\\]([^\\]\\[]*|[^\\[]*\\[(?!\\[)*[^\\]]*\\][^\\]]*)\\]/g;\n    var color_hex_re = /#([0-9A-Fa-f]{3}|[0-9A-Fa-f]{6})/;\n    var url_re = /(https?:((?!&[^;]+;)[^\\s:\"'<)])+)/g;\n    var email_regex = /((([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,})))/g;\n    $.terminal = {\n        // split text into lines with equal width and make each line be renderd\n        // separatly (text formating can be longer then a line).\n        split_equal: function(str, length) {\n            var array = str.split(/\\n/g);\n            var re_format = /(\\[\\[[gbius]*;[^;]*;[^\\]]*\\][^\\]\\[]*\\]?)/g;\n            var re_begin = /(\\[\\[[gbius]*;[^;]*;[^\\]]*\\])/;\n            var re_last = /\\[\\[[gbius]*;?[^;]*;?[^\\]]*\\]?$/;\n            var formatting = false;\n            var in_text = false;\n            var braket = 0;\n            var prev_format = '';\n            var result = [];\n            for (var i = 0, len = array.length; i < len; ++i) {\n                if (prev_format !== '') {\n                    if (array[i] === '') {\n                        result.push(prev_format + ']');\n                        continue;\n                    } else {\n                        array[i] = prev_format + array[i];\n                        prev_format = '';\n                    }\n                } else {\n                    if (array[i] === '') {\n                        result.push('');\n                        continue;\n                    }\n                }\n                var line = array[i];\n                var first_index = 0;\n                var count = 0;\n                for (var j=0, jlen=line.length; j<jlen; ++j) {\n                    if (line[j] === '[' && line[j+1] === '[') {\n                        formatting = true;\n                    } else if (formatting && line[j] === ']') {\n                        if (in_text) {\n                            formatting = false;\n                            in_text = false;\n                        } else {\n                            in_text = true;\n                        }\n                    } else if ((formatting && in_text) || !formatting) {\n                        ++count;\n                    }\n                    if (count === length || j === jlen-1) {\n                        var output_line = line.substring(first_index, j+1);\n                        if (prev_format) {\n                            output_line = prev_format + output_line;\n                            if (output_line.match(']')) {\n                                prev_format = '';\n                            }\n                        }\n                        first_index = j+1;\n                        count = 0;\n                        var matched = output_line.match(re_format);\n                        if (matched) {\n                            var last = matched[matched.length-1];\n                            if (last[last.length-1] !== ']') {\n                                prev_format = last.match(re_begin)[1];\n                                output_line += ']';\n                            } else if (output_line.match(re_last)) {\n                                var line_len = output_line.length;\n                                var f_len = line_len - last[last.length-1].length;\n                                output_line = output_line.replace(re_last, '');\n                                prev_format = last.match(re_begin)[1];\n                            }\n                        }\n                        result.push(output_line);\n                    }\n                }\n            }\n            return result;\n        },\n        // encode formating as html for inserto into DOM\n        encode: function(str) {\n            // don't escape entities\n            return str.replace(/&(?!#[0-9]+;|[a-zA-Z]+;)/g, '&amp;')\n                      .replace(/</g, '&lt;').replace(/>/g, '&gt;')\n                        // I don't think that it find \\n\n                      .replace(/\\n/g, '<br/>')\n                      .replace(/ /g, '&nbsp;')\n                      .replace(/\\t/g, '&nbsp;&nbsp;&nbsp;&nbsp;');\n        },\n        format: function(str) {\n            if (typeof str === 'string') {\n                str = $.terminal.encode($.terminal.from_ansi(str));\n                //support for formating foo[[u;;]bar]baz[[b;#fff;]quux]zzz\n                var splited = str.split(format_split_re);\n                if (splited && splited.length > 1) {\n                    str = $.map(splited, function(text) {\n                        if (text === '') {\n                            return text;\n                        } else if (text.substring(0,1) === '[') {\n                            // use substring for IE quirks mode - [0] don't work\n                            return text.replace(format_re, function(s,\n                                                                    style,\n                                                                    color,\n                                                                    background,\n                                                                    _class,\n                                                                    text) {\n                                if (text === '') {\n                                    return '<span>&nbsp;</span>';\n                                }\n                                var style_str = '';\n                                if (style.indexOf('b') !== -1) {\n                                    style_str += 'font-weight:bold;';\n                                }\n                                var text_decoration = 'text-decoration:';\n                                if (style.indexOf('u') !== -1) {\n                                    text_decoration += 'underline ';\n                                }\n                                if (style.indexOf('s') !== -1) {\n                                    text_decoration += 'line-through';\n                                }\n                                if (style.indexOf('s') !== -1 ||\n                                    style.indexOf('u') !== -1) {\n                                    style_str += text_decoration + ';';\n                                }\n                                if (style.indexOf('i') !== -1) {\n                                    style_str += 'font-style:italic;';\n                                }\n                                if (color.match(color_hex_re)) {\n                                    style_str += 'color:' + color + ';';\n                                    if (style.indexOf('g') !== -1) {\n                                        style_str += 'text-shadow: 0 0 5px ' + color + ';';\n                                    }\n                                }\n                                if (background.match(color_hex_re)) {\n                                    style_str += 'background-color:' + background;\n                                }\n                                var result = '<span style=\"' + style_str + '\"' +\n                                    (_class != '' ? ' class=\"' + _class + '\"' : '') +\n                                    '>' + text + '</span>';\n                                return result;\n                            });\n                        } else {\n                            return '<span>' + text + '</span>';\n                        }\n                    }).join('');\n                }\n                \n                return str.replace(url_re, function(link) {\n                        var comma = link.match(/\\.$/);\n                        link = link.replace(/\\.$/, '');\n                        return '<a target=\"_blank\" href=\"' + link + '\">' + link + '</a>' +\n                            (comma ? '.' : '');\n                }).replace(email_regex, '<a href=\"mailto:$1\">$1</a>').\n                   replace(/<span><br\\/?><\\/span>/g, '<br/>');\n            } else {\n                return '';\n            }\n        },\n        // remove formatting from text\n        strip: function(str) {\n            return str.replace(format_re, '$5');\n        },\n        // return active terminal\n        active: function() {\n            return terminals.front();\n        },\n        ansi_colors: {\n            normal: {\n                black: '#000',\n                red: '#AA0000',\n                green: '#008400',\n                yellow: '#AA5500',\n                blue: '#0000AA',\n                magenta: '#AA00AA',\n                cyan: '#00AAAA',\n                white: '#fff'\n            },\n            bold: {\n                white: '#fff',\n                red: '#FF5555',\n                green: '#44D544',\n                yellow: '#FFFF55',\n                blue: '#5555FF',\n                magenta: '#FF55FF',\n                cyan: '#55FFFF',\n                black: '#000'\n            }\n        },\n        from_ansi: (function() {\n            var color = {\n                30:\t'black',\n                31:\t'red',\n                32:\t'green',\n                33:\t'yellow',\n                34:\t'blue',\n                35:\t'magenta',\n                36:\t'cyan',\n                37:\t'white'\n            };\n            var background = {\n                40: 'black',\n                41: 'red',\n                42: 'green',\n                43: 'yellow',\n                44: 'blue',\n                45: 'magenta',\n                46: 'cyan',\n                47: 'white'\n            };\n            function format_ansi(code) {\n                var controls = code.split(';');\n                var num;\n                var styles = [];\n                var output_color = '';\n                var output_background = '';\n                for(var i in controls) {\n                    num = parseInt(controls[i], 10);\n                    if (num === 1) {\n                       styles.push('b');\n                    }\n                    if (num === 4) {\n                       styles.push('u');\n                    }\n                    if (background[num]) {\n                        output_background = background[num];\n                    }\n                    if (color[num]) {\n                        output_color = color[num];\n                    }\n                }\n                var normal = $.terminal.ansi_colors.normal;\n                var colors = normal;\n                for (var i=styles.length;i--;) {\n                    if (styles[i] == 'b') {\n                        if (output_color == '') {\n                            output_color = 'white';\n                        }\n                        colors = $.terminal.ansi_colors.bold;\n                        break;\n                    }\n                }\n                return '[[' + [styles.join(''),\n                               colors[output_color],\n                               normal[output_background]\n                              ].join(';') + ']';\n            }\n            return function(input) {\n                var splitted = input.split(/(\\[[0-9;]*m)/g);\n                if (splitted.length == 1) {\n                    return input;\n                }\n                var output = [];\n                //skip closing at the begining\n                if (splitted.length > 3 && splitted.slice(0,3).join('') == '[0m') {\n                    splitted = splitted.slice(3);\n                }\n                var inside = false;\n                for (var i=0; i<splitted.length; ++i) {\n                    var match = splitted[i].match(/^\\[([0-9;]*)m$/);\n                    if (match) {\n                        if (match[1] == '') {\n                            continue;\n                        }\n                        if (inside) {\n                            output.push(']');\n                            if (match[1] == '0') {\n                                //just closing\n                                inside = false;\n                            } else {\n                                // someone forget to close - process\n                                output.push(format_ansi(match[1]));\n                            }\n                        } else {\n                            inside = true;\n                            output.push(format_ansi(match[1]));\n                        }\n                    } else {\n                        output.push(splitted[i]);\n                    }\n                }\n                if (inside) {\n                    output.push(']');\n                }\n                return output.join('');\n            };\n        })()\n    };\n    \n    // -----------------------------------------------------------------------\n    // Helpers\n    // -----------------------------------------------------------------------\n    $.fn.visible = function() {\n        return this.css('visibility', 'visible');\n    };\n    $.fn.hidden = function() {\n        return this.css('visibility', 'hidden');\n    };\n    // -----------------------------------------------------------------------\n    // JSON-RPC CALL\n    // -----------------------------------------------------------------------\n    $.jrpc = function(url, id, method, params, success, error) {\n        var request = $.json_stringify({\n           'jsonrpc': '2.0', 'method': method,\n            'params': params, 'id': id});\n        return $.ajax({\n            url: url,\n            data: request,\n            success: success,\n            error: error,\n            contentType: 'application/json',\n            dataType: 'json',\n            async: true,\n            cache: false,\n            //timeout: 1,\n            type: 'POST'});\n    };\n\n    // -----------------------------------------------------------------------\n    // :: TERMINAL PLUGIN CODE\n    // -----------------------------------------------------------------------\n    var version = '0.4.22';\n    var copyright = 'Copyright (c) 2011-2012 Jakub Jankiewicz <http://jcubic.pl>';\n    var version_string = 'version ' + version;\n    //regex is for placing version string aligned to the right\n    var reg = new RegExp(\" {\" + version_string.length + \"}$\");\n    var signatures = [\n        ['jQuery Terminal', '(c) 2011-2012 jcubic'],\n        ['jQuery Terminal Emulator v. ' + version,\n         copyright.replace(/ *<.*>/, '')],\n        ['jQuery Terminal Emulator version ' + version_string,\n         copyright],\n        ['      _______                 ________                        __',\n         '     / / _  /_ ____________ _/__  ___/______________  _____  / /',\n         ' __ / / // / // / _  / _/ // / / / _  / _/     / /  \\\\/ / _ \\\\/ /',\n         '/  / / // / // / ___/ // // / / / ___/ // / / / / /\\\\  / // / /__',\n         '\\\\___/____ \\\\\\\\__/____/_/ \\\\__ / /_/____/_//_/ /_/ /_/  \\\\/\\\\__\\\\_\\\\___/',\n         '         \\\\/          /____/                                   '.replace(reg, '') +\n         version_string,\n         copyright],\n        ['      __ _____                     ________                              __',\n         '     / // _  /__ __ _____ ___ __ _/__  ___/__ ___ ______ __ __  __ ___  / /',\n         ' __ / // // // // // _  // _// // / / // _  // _//     // //  \\\\/ // _ \\\\/ /',\n         '/  / // // // // // ___// / / // / / // ___// / / / / // // /\\\\  // // / /__',\n         '\\\\___//____ \\\\\\\\___//____//_/ _\\\\_  / /_//____//_/ /_/ /_//_//_/ /_/ \\\\__\\\\_\\\\___/',\n         '          \\\\/              /____/                                          '.replace(reg, '') +\n         version_string,\n         copyright]\n    ];\n    // for canceling on CTRL+D\n    var requests = [];\n    var terminals = new Cycle(); //list of terminals global in this scope\n    $.fn.terminal = function(init_eval, options) {\n        var self = this;\n        var lines = [];\n        var output;\n        var terminal_id = terminals.length();\n        var num_chars; // numer of chars in line\n        var command_list = []; // for tab completion\n        var settings = $.extend({\n            name: '',\n            prompt: '> ',\n            history: true,\n            exit: true,\n            clear: true,\n            enabled: true,\n            displayExceptions: true,\n            cancelableAjax: true,\n            login: null,\n            tabcompletion: null,\n            historyFilter: null,\n            onInit: $.noop,\n            onClear: $.noop,\n            onBlur: $.noop,\n            onFocus: $.noop,\n            onTerminalChange: $.noop,\n            onExit: $.noop,\n            keypress: $.noop,\n            keydown: $.noop\n        }, options || {});\n\n        if (settings.width) {\n            self.width(settings.width);\n        }\n        if (settings.height) {\n            self.height(settings.height);\n        }\n\n        var pause = !settings.enabled;\n        if (self.length === 0) {\n            throw 'Sorry, but terminal said that \"' + self.selector +\n                '\" is not valid selector!';\n        }\n        // register ajaxSend for cancel requests on CTRL+D\n        self.ajaxSend(function(e, xhr, opt) {\n            requests.push(xhr);\n        });\n        // terminal already exist\n        if (self.data('terminal')) {\n            return self.data('terminal');\n        }\n        output = $('<div>').addClass('terminal-output').appendTo(self);\n        self.addClass('terminal').append('<div/>');\n        self.click(function() {\n            self.find('textarea').focus();\n        });\n        /*\n        self.bind('touchstart.touchScroll', function() {\n            \n        });\n        self.bind('touchmove.touchScroll', function() {\n            \n        });\n        */\n        //$('<input type=\"text\"/>').hide().focus().appendTo(self);\n        //calculate numbers of characters\n        function haveScrollbars() {\n            return self.get(0).scrollHeight > self.innerHeight();\n        }\n        function get_num_chars() {\n            var cursor = self.find('.cursor');\n            var cur_width = cursor.width();\n            var result = Math.floor(self.width() / cur_width);\n            if (haveScrollbars()) {\n                // assume that scrollbars are 20px - in my Laptop with\n                // Linux/Chrome they are 16px\n                var margins = self.innerWidth() - self.width();\n                result -= Math.ceil((20 - margins / 2) / (cur_width-1));\n            }\n            return result;\n        }\n\n        function escape_brackets(string) {\n            return string.replace(/\\[/g, '&#91;').replace(/\\]/g, '&#93;');\n        }\n\n        // display Exception on terminal\n        function display_exception(e, label) {\n            if (settings.displayExceptions) {\n                var message;\n                if (typeof e === 'string') {\n                    message = e;\n                } else {\n                    if (typeof e.fileName === 'string') {\n                        message = e.fileName + ': ' + e.message;\n                    } else {\n                        message = e.message;\n                    }\n                }\n                self.error('&#91;' + label + '&#93;: ' + message);\n                if (typeof e.fileName === 'string') {\n                    //display filename and line which throw exeption\n                    self.pause();\n                    $.get(e.fileName, function(file) {\n                        self.resume();\n                        var num = e.lineNumber - 1;\n                        var line = file.split('\\n')[num];\n                        if (line) {\n                            self.error('&#91;' + e.lineNumber + '&#93;: ' + line);\n                        }\n                    });\n                }\n                if (e.stack) {\n                    self.error(e.stack);\n                }\n            }\n        }\n\n        //validating if object is string or function, call that function and\n        //display exeption if any\n        function validate(label, object) {\n            try {\n                if (typeof object === 'function') {\n                    object(function() {\n                        // don't care\n                    });\n                } else if (typeof object !== 'string') {\n                    var msg = label + ' must be string or function';\n                    throw msg;\n                }\n            } catch (e) {\n                display_exception(e, label.toUpperCase());\n                return false;\n            }\n            return true;\n        }\n\n        function scroll_to_bottom() {\n            var scrollHeight = self.prop ? self.prop('scrollHeight') :\n                self.attr('scrollHeight');\n            self.scrollTop(scrollHeight);\n        }\n\n        function draw_line(string) {\n            string = typeof string === 'string' ? string : String(string);\n            var div, i, len;\n            if (string.length > num_chars) {\n                // string can have line break\n                //var array = string.split('\\n');\n                // TODO: the way it should work\n                var array = $.terminal.split_equal(string, num_chars);\n\n                div = $('<div></div>');\n                for (i = 0, len = array.length; i < len; ++i) {\n                    if (array[i] === '' || array[i] === '\\r') {\n                        div.append('<div>&nbsp;</div>');\n                    } else {\n                        $('<div/>').html($.terminal.format(array[i])).appendTo(div);\n                    }\n                }\n            } else {\n                div = $('<div/>').html($.terminal.format(string));\n            }\n            output.append(div);\n            div.width('100%');\n            scroll_to_bottom();\n            return div;\n        }\n\n        function show_greetings() {\n            if (options.greetings === undefined) {\n                self.echo(self.signature);\n            } else if (options.greetings) {\n                self.echo(options.greetings);\n            }\n        }\n\n        function is_scrolled_into_view(elem) {\n            var docViewTop = $(window).scrollTop();\n            var docViewBottom = docViewTop + $(window).height();\n\n            var elemTop = $(elem).offset().top;\n            var elemBottom = elemTop + $(elem).height();\n\n            return ((elemBottom >= docViewTop) && (elemTop <= docViewBottom));\n        }\n\n        // ----------------------------------------------------------\n        // TERMINAL METHODS\n        // ----------------------------------------------------------\n\n        var dalyed_commands = [];\n        $.extend(self, $.omap({\n            clear: function() {\n                output.html('');\n                command_line.set('');\n                lines = [];\n                try {\n                    settings.onClear(self);\n                } catch (e) {\n                    display_exception(e, 'onClear');\n                    throw e;\n                }\n                self.attr({ scrollTop: 0});\n                return self;\n            },\n            exec: function(command, silent) {\n                if (pause) {\n                    dalyed_commands.push([command, silent]);\n                } else {\n                    commands(command, silent);\n                }\n                return self;\n            },\n            commands: function() {\n                return interpreters.top().eval;\n            },\n            greetings: function() {\n                show_greetings();\n                return self;\n            },\n            paused: function() {\n                return pause;\n            },\n            pause: function() {\n                if (command_line) {\n                    pause = true;\n                    self.disable();\n                    command_line.hidden();\n                }\n                return self;\n            },\n            resume: function() {\n                if (command_line) {\n                    self.enable();\n                    var original = dalyed_commands;\n                    dalyed_commands = [];\n                    while (original.length) {\n                        var command = original.shift();\n                        self.exec.apply(self, command);\n                    }\n                    command_line.visible();\n                    scroll_to_bottom();\n                }\n                return self;\n            },\n            cols: function() {\n                return num_chars;\n            },\n            rows: function() {\n                return lines.length;\n            },\n            history: function() {\n                return command_line.history();\n            },\n            next: function() {\n                if (terminals.length() === 1) {\n                    return self;\n                } else {\n                    var offsetTop = self.offset().top;\n                    var height = self.height();\n                    var scrollTop = self.scrollTop();\n                    if (!is_scrolled_into_view(self)) {\n                        self.enable();\n                        $('html,body').animate({scrollTop: offsetTop-50}, 500);\n                        return self;\n                    } else {\n                        terminals.front().disable();\n                        var next = terminals.rotate().enable();\n                        // 100 provides buffer in viewport\n                        var x = next.offset().top - 50;\n                        $('html,body').animate({scrollTop: x}, 500);\n                        try {\n                            settings.onTerminalChange(next);\n                        } catch (e) {\n                            display_exception(e, 'onTerminalChange');\n                            throw e;\n                        }\n                        return next;\n                    }\n                }\n            },\n            // silent used so events are not fired on init\n            focus: function(toggle, silent) {\n                self.oneTime(1, function() {\n                    if (terminals.length() === 1) {\n                        if (toggle === false) {\n                            try {\n                                if (!silent && settings.onBlur(self) !== false) {\n                                    self.disable();\n                                }\n                            } catch (e) {\n                                display_exception(e, 'onBlur');\n                                throw e;\n                            }\n                        } else {\n                            try {\n                                if (!silent && settings.onFocus(self) !== false) {\n                                    self.enable();\n                                }\n                            } catch (e) {\n                                display_exception(e, 'onFocus');\n                                throw e;\n                            }\n                        }\n                    } else {\n                        if (toggle === false) {\n                            self.next();\n                        } else {\n                            var front = terminals.front();\n                            if (front != self) {\n                                front.disable();\n                                if (!silent) {\n                                    try {\n                                        settings.onTerminalChange(self);\n                                    } catch (e) {\n                                        display_exception(e, 'onTerminalChange');\n                                        throw e;\n                                    }\n                                }\n                            }\n                            terminals.set(self);\n                            self.enable();\n                        }\n\n                    }\n                });\n                return self;\n            },\n            enable: function() {\n                if (num_chars === undefined) {\n                    //enabling first time\n                    self.resize();\n                }\n                if (pause) {\n                    if (command_line) {\n                        command_line.enable();\n                        pause = false;\n                    }\n                }\n                return self;\n            },\n            disable: function() {\n                if (command_line) {\n                    pause = true;\n                    command_line.disable();\n                }\n                return self;\n            },\n            enabled: function() {\n                return pause;\n            },\n            signature: function() {\n                var cols = self.cols();\n                var i = cols < 15 ? null : cols < 35 ? 0 : cols < 55 ? 1 : cols < 64 ? 2 : cols < 75 ? 3 : 4;\n                if (i !== null) {\n                    return signatures[i].join('\\n') + '\\n';\n                } else {\n                    return '';\n                }\n            },\n            version: function() {\n                return version;\n            },\n            /* COMMAND LINE FUNCTIONS */\n            get_command: function() {\n                return command_line.get();\n            },\n            insert: function(string) {\n                if (typeof string === 'string') {\n                    command_line.insert(string);\n                    return self;\n                } else {\n                    throw \"insert function argument is not a string\";\n                }\n            },\n            set_prompt: function(prompt) {\n                if (validate('prompt', prompt)) {\n                    if (typeof prompt == 'function') {\n                        command_line.prompt(function(command) {\n                            prompt(command, self);\n                        });\n                    } else {\n                        command_line.prompt(prompt);\n                    }\n                    interpreters.top().prompt = prompt;\n                }\n                return self;\n            },\n            get_prompt: function() {\n                return interpreters.top().prompt;\n                // command_line.prompt(); - can be a wrapper\n                //return command_line.prompt();\n            },\n            set_command: function(command) {\n                command_line.set(command);\n                return self;\n            },\n            set_mask: function(display) {\n                command_line.mask(display);\n                return self;\n            },\n            get_output: function(raw) {\n                if (raw) {\n                    return lines;\n                } else {\n                    return $.map(lines, function(i, item) {\n                        return typeof item == 'function' ? item() : item;\n                    }).join('\\n');\n                }\n            },\n            resize: function(width, height) {\n                if (width && height) {\n                    self.width(width);\n                    self.height(height);\n                }\n                num_chars = get_num_chars();\n                command_line.resize(num_chars);\n                var o = output.detach();\n                output.html('');\n                $.each(lines, function(i, line) {\n                    draw_line(line && typeof line == 'function' ? line() : line);\n                });\n                self.prepend(o);\n                scroll_to_bottom();\n                return self;\n            },\n            echo: function(line) {\n                lines.push(line);\n                draw_line(typeof line === 'function' ? line() : line);\n                on_scrollbar_show_resize();\n                return self;\n            },\n            error: function(message) {\n                //echo red message\n                return self.echo('[[;#f00;]' + escape_brackets(message) + ']');\n            },\n            scroll: function(amount) {\n                var pos;\n                amount = Math.round(amount);\n                if (self.prop) {\n                    if (amount > self.prop('scrollTop') && amount > 0) {\n                        self.prop('scrollTop', 0);\n                    }\n                    pos = self.prop('scrollTop');\n                    self.prop('scrollTop', pos + amount);\n                    return self;\n                } else {\n                    if (amount > self.attr('scrollTop') && amount > 0) {\n                        self.attr('scrollTop', 0);\n                    }\n                    pos = self.attr('scrollTop');\n                    self.attr('scrollTop', pos + amount);\n                    return self;\n                }\n            },\n            logout: settings.login ? function() {\n                while (interpreters.size() > 1) {\n                    interpreters.pop();\n                }\n                logout();\n                return self;\n            } : function() {\n                throw \"You don't have login function\";\n            },\n            token: settings.login ? function() {\n                var name = settings.name;\n                return $.Storage.get('token' + (name ? '_' + name : ''));\n            } : $.noop,\n            login_name: settings.login ? function() {\n                var name = settings.name;\n                return $.Storage.get('login' + (name ? '_' + name : ''));\n            } : $.noop,\n            name: function() {\n                return settings.name;\n            },\n            push: function(_eval, options) {\n                if (options && (!options.prompt || validate('prompt', options.prompt)) || !options) {\n                    if (typeof _eval === 'string') {\n                        _eval = make_json_rpc_eval_fun(options['eval'], self);\n                    }\n                    interpreters.push($.extend({'eval': _eval}, options));\n                    prepare_top_interpreter();\n                }\n                return self;\n            },\n            reset: function() {\n                self.clear();\n                while(interpreters.size() > 1) {\n                    interpreters.pop();\n                }\n                initialize();\n            },\n            pop: function(string) {\n                if (string !== undefined) {\n                    echo_command(string);\n                }\n                if (interpreters.top().name === settings.name) {\n                    if (settings.login) {\n                        logout();\n                        if (typeof settings.onExit === 'function') {\n                            try {\n                                settings.onExit(self);\n                            } catch (e) {\n                                display_exception(e, 'onExit');\n                                throw e;\n                            }\n                        }\n                    }\n                } else {\n                    var current = interpreters.pop();\n                    prepare_top_interpreter();\n                    if (typeof current.onExit === 'function') {\n                        try {\n                            current.onExit(self);\n                        } catch (e) {\n                            display_exception(e, 'onExit');\n                            throw e;\n                        }\n                    }\n                }\n                return self;\n            }\n        }, function(_, fun) {\n            // wrap all functions and display execptions\n            return function() {\n                try {\n                    return fun.apply(this, Array.prototype.slice.apply(arguments));\n                } catch(e) {\n                    display_exception(e, 'TERMINAL');\n                }\n            };\n        }));\n\n        //function constructor for eval\n        function make_json_rpc_eval_fun(url, terminal) {\n            var id = 1;\n            var service = function(method, params) {\n                terminal.pause();\n                $.jrpc(url, id++, method, params, function(json) {\n                    if (!json.error) {\n                        if (typeof json.result === 'string') {\n                            terminal.echo(json.result);\n                        } else if (json.result instanceof Array) {\n                            terminal.echo(json.result.join(' '));\n                        } else if (typeof json.result === 'object') {\n                            var string = '';\n                            for (var f in json.result) {\n                                if (json.result.hasOwnProperty(f)) {\n                                    string += f + ': ' + json.result[f] + '\\n';\n                                }\n                            }\n                            terminal.echo(string);\n                        }\n                    } else {\n                        terminal.error('&#91;RPC&#93; ' + json.error.message);\n                    }\n                    terminal.resume();\n                }, function(xhr, status, error) {\n                    terminal.error('&#91;AJAX&#93; ' + status +\n                                   ' - Server reponse is: \\n' +\n                                   xhr.responseText);\n                    terminal.resume();\n                });\n            };\n            //this is eval function\n            return function(command, terminal) {\n                if (command === '') {\n                    return;\n                }\n                var method, params;\n                if (!command.match(/[^ ]* /)) {\n                    method = command;\n                    params = [];\n                } else {\n                    command = command.split(/ +/);\n                    method = command[0];\n                    params = command.slice(1);\n                }\n                if (!settings.login || method === 'help') {\n                    service(method, params);\n                } else {\n                    var token = terminal.token();\n                    if (token) {\n                        service(method, [token].concat(params));\n                    } else {\n                        //should never happen\n                        terminal.error('&#91;AUTH&#93; Access denied (no token)');\n                    }\n                }\n            };\n        }\n\n        //display prompt and last command\n        function echo_command(command) {\n            command = command.replace(/\\[/g, '&#91;').replace(/\\]/g, '&#93;');\n            var prompt = command_line.prompt();\n            if (command_line.mask()) {\n                command = command.replace(/./g, '*');\n            }\n            if (typeof prompt === 'function') {\n                prompt(function(string) {\n                    self.echo(string + command);\n                });\n            } else {\n                self.echo(prompt + command);\n            }\n        }\n\n        // wrapper over eval it implements exit and catch all exeptions\n        // from user code and display them on terminal\n        function commands(command, silent) {\n            try {\n                var interpreter = interpreters.top();\n                if (command === 'exit' && settings.exit) {\n                    if (interpreters.size() === 1) {\n                        if (settings.login) {\n                            logout();\n                        } else {\n                            var msg = 'You can exit from main interpeter';\n                            if (!silent) {\n                                echo_command(command);\n                            }\n                            self.echo(msg);\n                        }\n                    } else {\n                        self.pop('exit');\n                    }\n                } else {\n                    if (!silent) {\n                        echo_command(command);\n                    }\n                    if (command === 'clear' && settings.clear) {\n                        self.clear();\n                    } else {\n                        interpreter['eval'](command, self);\n                    }\n                }\n\n            } catch (e) {\n                display_exception(e, 'USER');\n                self.resume();\n                throw e;\n            }\n        }\n\n        // functions change prompt of command line to login to password\n        // and call user login function with callback that set token\n        // if user call it with value that is true\n        function login() {\n            var user = null;\n            command_line.prompt('login: ');\n            // don't stor logins in history\n            if (settings.history) {\n                command_line.history().disable();\n            }\n            command_line.commands(function(command) {\n                try {\n                    echo_command(command);\n                    if (!user) {\n                        user = command;\n                        command_line.prompt('password: ');\n                        command_line.mask(true);\n                    } else {\n                        command_line.mask(false);\n                        self.pause();\n                        if (typeof settings.login !== 'function') {\n                            throw \"Value of login property must be a function\";\n                        }\n                        var passwd = command;\n                        settings.login(user, passwd, function(token) {\n                            if (token) {\n                                var name = settings.name;\n                                name = (name ? '_' + name : '');\n                                $.Storage.set('token' + name, token);\n                                $.Storage.set('login' + name, user);\n                                //restore commands and run interpreter\n                                command_line.commands(commands);\n                                // move this to one function init.\n                                initialize();\n                            } else {\n                                self.error('Wrong password try again');\n                                command_line.prompt('login: ');\n                                user = null;\n                            }\n                            self.resume();\n                            if (settings.history) {\n                                command_line.history().enable();\n                            }\n                        });\n                    }\n                } catch (e) {\n                    display_exception(e, 'LOGIN', self);\n                    throw e;\n                }\n            });\n        }\n\n        //logout function remove Storage, disable history and run login function\n        //this function is call only when options.login function is defined\n        //check for this is in self.pop method\n        function logout() {\n            if (typeof settings.onBeforelogout === 'function') {\n                try {\n                    if (settings.onBeforelogout(self) == false) {\n                        return;\n                    }\n                } catch (e) {\n                    display_exception(e, 'onBeforelogout');\n                    throw e;\n                }\n            }\n            var name = settings.name;\n            name = (name ? '_' + name : '');\n            $.Storage.remove('token' + name, null);\n            $.Storage.remove('login' + name, null);\n            if (settings.history) {\n                command_line.history().disable();\n            }\n            login();\n            if (typeof settings.onAfterlogout === 'function') {\n                try {\n                    settings.onAfterlogout(self);\n                } catch (e) {\n                    display_exception(e, 'onAfterlogout');\n                    throw e;\n                }\n            }\n        }\n\n        //function enable history, set prompt, run eval function\n        function prepare_top_interpreter() {\n            var interpreter = interpreters.top();\n            var name = '';\n            if (interpreter.name !== undefined &&\n                interpreter.name !== '') {\n                name += interpreter.name + '_';\n            }\n            name += terminal_id;\n            command_line.name(name);\n            if (typeof interpreter.prompt == 'function') {\n                command_line.prompt(function(command) {\n                    interpreter.prompt(command, self);\n                });\n            } else {\n                command_line.prompt(interpreter.prompt);\n            }\n            if (settings.history) {\n                command_line.history().enable();\n            }\n            command_line.set('');\n            if (typeof interpreter.onStart === 'function') {\n                interpreter.onStart(self);\n            }\n        }\n        function initialize() {\n            prepare_top_interpreter();\n            show_greetings();\n            if (typeof settings.onInit === 'function') {\n                try {\n                    settings.onInit(self);\n                } catch (e) {\n                    display_exception(e, 'OnInit');\n                    throw e;\n                }\n            }\n        }\n        \n        // ---------------------------------------------------------------------\n        var on_scrollbar_show_resize = (function() {\n            var scrollBars = haveScrollbars();\n            return function() {\n                if (scrollBars !== haveScrollbars()) {\n                    // if scollbars appearance change we will have different\n                    // number of chars\n                    self.resize();\n                    scrollBars = haveScrollbars();\n                }\n            };\n        })();\n        // ---------------------------------------------------------------------\n        // KEYDOWN EVENT HANDLER\n        // ---------------------------------------------------------------------\n        var tab_count = 0;\n        \n        function key_down(e) {\n            var i;\n            // after text pasted into textarea in cmd plugin\n            self.oneTime(5, function() {\n                on_scrollbar_show_resize();\n            });\n            if (settings.keydown && settings.keydown(e, self) === false) {\n                return false;\n            }\n            if (!self.paused()) {\n                \n                if (e.which !== 9) { // not a TAB\n                    tab_count = 0;\n                }\n                if (e.which === 68 && e.ctrlKey) { // CTRL+D\n                    if (command_line.get() === '') {\n                        if (interpreters.size() > 1 ||\n                            settings.login !== undefined) {\n                            self.pop('');\n                        } else {\n                            self.resume();\n                            self.echo('');\n                        }\n                    } else {\n                        self.set_command('');\n                    }\n                    return false;\n                } else if (settings.tabcompletion && e.which === 9) { // TAB\n                    // TODO: move this to cmd plugin\n                    //       add tabcompletion = array | function\n                    ++tab_count;\n                    var command = command_line.get();\n                    if (!command.match(' ')) { // complete only first word\n                        var reg = new RegExp('^' + command);\n                        var commands = interpreters.top().command_list;\n                        var matched = [];\n                        for (i=commands.length; i--;) {\n                            if (reg.test(commands[i])) {\n                                matched.push(commands[i]);\n                            }\n                        }\n                        if (matched.length === 1) {\n                            self.set_command(matched[0]);\n                        } else if (matched.length > 1) {\n                            if (tab_count >= 2) {\n                                echo_command(command);\n                                self.echo(matched.join('\\t'));\n                                tab_count = 0;\n                            }\n                        }\n                    }\n                    return false;\n                } else if (e.which === 86 && e.ctrlKey) { // CTRL+V\n                    self.oneTime(1, function() {\n                        scroll_to_bottom();\n                    });\n                    return true;\n                } else if (e.which === 9 && e.ctrlKey) { // CTRL+TAB\n                    if (terminals.length() > 1) {\n                        self.focus(false);\n                    }\n                    return false;\n                } else if (e.which === 34) { // PAGE DOWN\n                    self.scroll(self.height());\n                } else if (e.which === 33) { // PAGE UP\n                    self.scroll(-self.height());\n                } else {\n                    self.attr({scrollTop: self.attr('scrollHeight')});\n                }\n            } else {\n                if (e.which === 68 && e.ctrlKey) { // CTRL+D\n                    for (i=requests.length; i--;) {\n                        var r = requests[i];\n                        if (4 !== r.readyState) {\n                            try {\n                                r.abort();\n                            } catch(e) {\n                                self.error('error in aborting ajax');\n                            }\n                        }\n                    }\n                    self.resume();\n                    return false;\n                }\n            }\n        }\n        // ---------------------------------------------------------------------\n        // INIT CODE\n        // ---------------------------------------------------------------------\n        var url;\n        if (settings.login && typeof settings.onBeforeLogin === 'function') {\n            try {\n                settings.onBeforeLogin(self);\n            } catch (e) {\n                display_exception(e, 'onBeforeLogin');\n                throw e;\n            }\n        }\n        if (typeof init_eval == 'string') {\n            url = init_eval; //url variable is use when making login function\n            init_eval = make_json_rpc_eval_fun(init_eval, self);\n        } else if (typeof init_eval == 'object' && init_eval.constructor === Array) {\n            throw \"You can't use array as eval\";\n        } else if (typeof init_eval === 'object') {\n            // top commands\n            for (var i in init_eval) {\n                if (init_eval.hasOwnProperty(i)) {\n                    command_list.push(i);\n                }\n            }\n            init_eval = (function make_eval(object) {\n                // function that maps commands to object methods\n                // it keeps terminal context\n                return function(command, terminal) {\n                    if (command === '') {\n                        return;\n                    }\n                    command = command.split(/ +/);\n                    var method = command[0];\n                    var params = command.slice(1);\n                    var val = object[method];\n                    var type = typeof val;\n                    if (type === 'function') {\n                        val.apply(self, params);\n                    } else if (type === 'object' || type === 'string') {\n                        var commands = [];\n                        if (type === 'object') {\n                            for (var m in val) {\n                                if (val.hasOwnProperty(m)) {\n                                    commands.push(m);\n                                }\n                            }\n                            val = make_eval(val);\n                        }\n                        self.push(val, {\n                            prompt: method + '> ',\n                            name: method,\n                            command_list: commands\n                        });\n                    } else {\n                        self.error(\"Command '\" + method + \"' Not Found\");\n                    }\n                };\n            })(init_eval);\n        } else if (typeof init_eval !== 'function') {\n            throw 'Unknow object \"' + String(init_eval) + '\" passed as eval';\n        }\n\n        // create json-rpc authentication function\n        if (url && (typeof settings.login === 'string' || settings.login)) {\n            settings.login = (function(method) {\n                var id = 1;\n                return function(user, passwd, callback) {\n                    self.pause();\n                    $.jrpc(url,\n                           id++,\n                           method,\n                           [user, passwd],\n                           function(response) {\n                               self.resume();\n                               if (!response.error && response.result) {\n                                   callback(response.result);\n                               } else {\n                                   callback(null);\n                               }\n                           }, function(xhr, status, error) {\n                               self.resume();\n                               self.error('&#91;AJAX&#92; Response: ' +\n                                          status + '\\n' +\n                                          xhr.responseText);\n                           });\n                };\n                //default name is login so you can pass true\n            })(typeof settings.login === 'boolean' ? 'login' : settings.login);\n        }\n        if (validate('prompt', settings.prompt)) {\n            var interpreters = new Stack({\n                name: settings.name,\n                'eval': init_eval,\n                prompt: settings.prompt,\n                command_list: command_list,\n                greetings: settings.greetings\n            });\n            var command_line = self.find('.terminal-output').next().cmd({\n                prompt: settings.prompt,\n                history: settings.history,\n                historyFilter: settings.historyFilter,\n                width: '100%',\n                keydown: key_down,\n                keypress: settings.keypress ? function(e) {\n                    return settings.keypress(e, self);\n                } : null,\n                onCommandChange: function(command) {\n                    if (typeof settings.onCommandChange === 'function') {\n                        try {\n                            settings.onCommandChange(command, self);\n                        } catch (e) {\n                            display_exception(e, 'onCommandChange');\n                            throw e;\n                        }\n                    }\n                    scroll_to_bottom();\n                },\n                commands: commands\n            });\n            //num_chars = get_num_chars();\n            terminals.append(self);\n            if (settings.enabled === true) {\n                self.focus(undefined, true);\n            } else {\n                self.disable();\n            }\n            $(window).resize(self.resize);\n            self.click(function() {\n                if (!(pause && terminals.length() > 1 && self === $.terminal.active())) {\n                    self.focus();\n                }\n            });\n            if (options.login && self.token && !self.token() && self.login_name &&\n                !self.login_name()) {\n                login();\n            } else {\n                initialize();\n            }\n            if (typeof $.fn.init.prototype.mousewheel === 'function') {\n                self.mousewheel(function(event, delta) {\n                    //self.echo(dir(event));\n                    if (delta > 0) {\n                        self.scroll(-40);\n                    } else {\n                        self.scroll(40);\n                    }\n                    return false;\n                }, true);\n            }\n        }\n        self.data('terminal', self);\n        return self;\n\n    }; //terminal plugin\n})(jQuery);\n"]],"start1":0,"start2":0,"length1":0,"length2":106599}]],"length":106599}

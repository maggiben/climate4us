{"ts":1356032244961,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"﻿//Title: Custom DropDown plugin by PC\r\n//Documentation: http://designwithpc.com/Plugins/ddslick\r\n//Author: PC \r\n//Website: http://designwithpc.com\r\n//Twitter: http://twitter.com/chaudharyp\r\n\r\n(function ($) {\r\n\r\n    $.fn.ddslick = function (method) {\r\n        if (methods[method]) {\r\n            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\r\n        } else if (typeof method === 'object' || !method) {\r\n            return methods.init.apply(this, arguments);\r\n        } else {\r\n            $.error('Method ' + method + ' does not exists.');\r\n        }\r\n    };\r\n\r\n    var methods = {},\r\n\r\n    //Set defauls for the control\r\n    defaults = {\r\n        data: [],\r\n        keepJSONItemsOnTop: false,\r\n        width: 260,\r\n        height: null,\r\n        background: \"#eee\",\r\n        selectText: \"\",\r\n        defaultSelectedIndex: null,\r\n        truncateDescription: true,\r\n        imagePosition: \"left\",\r\n        showSelectedHTML: true,\r\n        clickOffToClose: true,\r\n        onSelected: function () { }\r\n    },\r\n\r\n    ddSelectHtml = '<div class=\"dd-select\"><input class=\"dd-selected-value\" type=\"hidden\" /><a class=\"dd-selected\"></a><span class=\"dd-pointer dd-pointer-down\"></span></div>',\r\n    ddOptionsHtml = '<ul class=\"dd-options\"></ul>',\r\n\r\n    //CSS for ddSlick\r\n    ddslickCSS = '<style id=\"css-ddslick\" type=\"text/css\">' +\r\n                '.dd-select{ border-radius:2px; border:solid 1px #ccc; position:relative; cursor:pointer;}' +\r\n                '.dd-desc { color:#aaa; display:block; overflow: hidden; font-weight:normal; line-height: 1.4em; }' +\r\n                '.dd-selected{ overflow:hidden; display:block; padding:10px; font-weight:bold;}' +\r\n                '.dd-pointer{ width:0; height:0; position:absolute; right:10px; top:50%; margin-top:-3px;}' +\r\n                '.dd-pointer-down{ border:solid 5px transparent; border-top:solid 5px #000; }' +\r\n                '.dd-pointer-up{border:solid 5px transparent !important; border-bottom:solid 5px #000 !important; margin-top:-8px;}' +\r\n                '.dd-options{ border:solid 1px #ccc; border-top:none; list-style:none; box-shadow:0px 1px 5px #ddd; display:none; position:absolute; z-index:2000; margin:0; padding:0;background:#fff; overflow:auto;}' +\r\n                '.dd-option{ padding:10px; display:block; border-bottom:solid 1px #ddd; overflow:hidden; text-decoration:none; color:#333; cursor:pointer;-webkit-transition: all 0.25s ease-in-out; -moz-transition: all 0.25s ease-in-out;-o-transition: all 0.25s ease-in-out;-ms-transition: all 0.25s ease-in-out; }' +\r\n                '.dd-options > li:last-child > .dd-option{ border-bottom:none;}' +\r\n                '.dd-option:hover{ background:#f3f3f3; color:#000;}' +\r\n                '.dd-selected-description-truncated { text-overflow: ellipsis; white-space:nowrap; }' +\r\n                '.dd-option-selected { background:#f6f6f6; }' +\r\n                '.dd-option-image, .dd-selected-image { vertical-align:middle; float:left; margin-right:5px; max-width:64px;}' +\r\n                '.dd-image-right { float:right; margin-right:15px; margin-left:5px;}' +\r\n                '.dd-container{ position:relative;}​ .dd-selected-text { font-weight:bold}​</style>';\r\n\r\n    //CSS styles are only added once.\r\n    if ($('#css-ddslick').length <= 0) {\r\n        $(ddslickCSS).appendTo('head');\r\n    }\r\n\r\n    //Public methods \r\n    methods.init = function (options) {\r\n        //Preserve the original defaults by passing an empty object as the target\r\n        var options = $.extend({}, defaults, options);\r\n\r\n        //Apply on all selected elements\r\n        return this.each(function () {\r\n            var obj = $(this),\r\n                data = obj.data('ddslick');\r\n            //If the plugin has not been initialized yet\r\n            if (!data) {\r\n\r\n                var ddSelect = [], ddJson = options.data;\r\n\r\n                //Get data from HTML select options\r\n                obj.find('option').each(function () {\r\n                    var $this = $(this), thisData = $this.data();\r\n                    ddSelect.push({\r\n                        text: $.trim($this.text()),\r\n                        value: $this.val(),\r\n                        selected: $this.is(':selected'),\r\n                        description: thisData.description,\r\n                        imageSrc: thisData.imagesrc //keep it lowercase for HTML5 data-attributes\r\n                    });\r\n                });\r\n\r\n                //Update Plugin data merging both HTML select data and JSON data for the dropdown\r\n                if (options.keepJSONItemsOnTop)\r\n                    $.merge(options.data, ddSelect);\r\n                else options.data = $.merge(ddSelect, options.data);\r\n\r\n                //Replace HTML select with empty placeholder, keep the original\r\n                var original = obj, placeholder = $('<div id=\"' + obj.attr('id') + '\"></div>');\r\n                obj.replaceWith(placeholder);\r\n                obj = placeholder;\r\n\r\n                //Add classes and append ddSelectHtml & ddOptionsHtml to the container\r\n                obj.addClass('dd-container').append(ddSelectHtml).append(ddOptionsHtml);\r\n\r\n                //Get newly created ddOptions and ddSelect to manipulate\r\n                var ddSelect = obj.find('.dd-select'),\r\n                    ddOptions = obj.find('.dd-options');\r\n\r\n                //Set widths\r\n                ddOptions.css({ width: options.width });\r\n                ddSelect.css({ width: options.width, background: options.background });\r\n                obj.css({ width: options.width });\r\n\r\n                //Set height\r\n                if (options.height != null)\r\n                    ddOptions.css({ height: options.height, overflow: 'auto' });\r\n\r\n                //Add ddOptions to the container. Replace with template engine later.\r\n                $.each(options.data, function (index, item) {\r\n                    if (item.selected) options.defaultSelectedIndex = index;\r\n                    ddOptions.append('<li>' +\r\n                        '<a class=\"dd-option\">' +\r\n                            (item.value ? ' <input class=\"dd-option-value\" type=\"hidden\" value=\"' + item.value + '\" />' : '') +\r\n                            (item.imageSrc ? ' <img class=\"dd-option-image' + (options.imagePosition == \"right\" ? ' dd-image-right' : '') + '\" src=\"' + item.imageSrc + '\" />' : '') +\r\n                            (item.text ? ' <label class=\"dd-option-text\">' + item.text + '</label>' : '') +\r\n                            (item.description ? ' <small class=\"dd-option-description dd-desc\">' + item.description + '</small>' : '') +\r\n                        '</a>' +\r\n                    '</li>');\r\n                });\r\n\r\n                //Save plugin data.\r\n                var pluginData = {\r\n                    settings: options,\r\n                    original: original,\r\n                    selectedIndex: -1,\r\n                    selectedItem: null,\r\n                    selectedData: null\r\n                }\r\n                obj.data('ddslick', pluginData);\r\n\r\n                //Check if needs to show the select text, otherwise show selected or default selection\r\n                if (options.selectText.length > 0 && options.defaultSelectedIndex == null) {\r\n                    obj.find('.dd-selected').html(options.selectText);\r\n                }\r\n                else {\r\n                    var index = (options.defaultSelectedIndex != null && options.defaultSelectedIndex >= 0 && options.defaultSelectedIndex < options.data.length)\r\n                                ? options.defaultSelectedIndex\r\n                                : 0;\r\n                    selectIndex(obj, index);\r\n                }\r\n\r\n                //EVENTS\r\n                //Displaying options\r\n                obj.find('.dd-select').on('click.ddslick', function () {\r\n                    open(obj);\r\n                });\r\n\r\n                //Selecting an option\r\n                obj.find('.dd-option').on('click.ddslick', function () {\r\n                    selectIndex(obj, $(this).closest('li').index());\r\n                });\r\n\r\n                //Click anywhere to close\r\n                if (options.clickOffToClose) {\r\n                    ddOptions.addClass('dd-click-off-close');\r\n                    obj.on('click.ddslick', function (e) { e.stopPropagation(); });\r\n                    $('body').on('click', function () {\r\n                        $('.dd-click-off-close').slideUp(50).siblings('.dd-select').find('.dd-pointer').removeClass('dd-pointer-up');\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    //Public method to select an option by its index\r\n    methods.select = function (options) {\r\n        return this.each(function () {\r\n            if (options.index)\r\n                selectIndex($(this), options.index);\r\n        });\r\n    }\r\n\r\n    //Public method to open drop down\r\n    methods.open = function () {\r\n        return this.each(function () {\r\n            var $this = $(this),\r\n                pluginData = $this.data('ddslick');\r\n\r\n            //Check if plugin is initialized\r\n            if (pluginData)\r\n                open($this);\r\n        });\r\n    };\r\n\r\n    //Public method to close drop down\r\n    methods.close = function () {\r\n        return this.each(function () {\r\n            var $this = $(this),\r\n                pluginData = $this.data('ddslick');\r\n\r\n            //Check if plugin is initialized\r\n            if (pluginData)\r\n                close($this);\r\n        });\r\n    };\r\n\r\n    //Public method to destroy. Unbind all events and restore the original Html select/options\r\n    methods.destroy = function () {\r\n        return this.each(function () {\r\n            var $this = $(this),\r\n                pluginData = $this.data('ddslick');\r\n\r\n            //Check if already destroyed\r\n            if (pluginData) {\r\n                var originalElement = pluginData.original;\r\n                $this.removeData('ddslick').unbind('.ddslick').replaceWith(originalElement);\r\n            }\r\n        });\r\n    }\r\n\r\n    //Private: Select index\r\n    function selectIndex(obj, index) {\r\n\r\n        //Get plugin data\r\n        var pluginData = obj.data('ddslick');\r\n\r\n        //Get required elements\r\n        var ddSelected = obj.find('.dd-selected'),\r\n            ddSelectedValue = ddSelected.siblings('.dd-selected-value'),\r\n            ddOptions = obj.find('.dd-options'),\r\n            ddPointer = ddSelected.siblings('.dd-pointer'),\r\n            selectedOption = obj.find('.dd-option').eq(index),\r\n            selectedLiItem = selectedOption.closest('li'),\r\n            settings = pluginData.settings,\r\n            selectedData = pluginData.settings.data[index];\r\n\r\n        //Highlight selected option\r\n        obj.find('.dd-option').removeClass('dd-option-selected');\r\n        selectedOption.addClass('dd-option-selected');\r\n\r\n        //Update or Set plugin data with new selection\r\n        pluginData.selectedIndex = index;\r\n        pluginData.selectedItem = selectedLiItem;\r\n        pluginData.selectedData = selectedData;        \r\n\r\n        //If set to display to full html, add html\r\n        if (settings.showSelectedHTML) {\r\n            ddSelected.html(\r\n                    (selectedData.imageSrc ? '<img class=\"dd-selected-image' + (settings.imagePosition == \"right\" ? ' dd-image-right' : '') + '\" src=\"' + selectedData.imageSrc + '\" />' : '') +\r\n                    (selectedData.text ? '<label class=\"dd-selected-text\">' + selectedData.text + '</label>' : '') +\r\n                    (selectedData.description ? '<small class=\"dd-selected-description dd-desc' + (settings.truncateDescription ? ' dd-selected-description-truncated' : '') + '\" >' + selectedData.description + '</small>' : '')\r\n                );\r\n\r\n        }\r\n        //Else only display text as selection\r\n        else ddSelected.html(selectedData.text);\r\n\r\n        //Updating selected option value\r\n        ddSelectedValue.val(selectedData.value);\r\n\r\n        //BONUS! Update the original element attribute with the new selection\r\n        pluginData.original.val(selectedData.value);\r\n        obj.data('ddslick', pluginData);\r\n\r\n        //Close options on selection\r\n        close(obj);\r\n\r\n        //Adjust appearence for selected option\r\n        adjustSelectedHeight(obj);\r\n\r\n        //Callback function on selection\r\n        if (typeof settings.onSelected == 'function') {\r\n            settings.onSelected.call(this, pluginData);\r\n        }\r\n    }\r\n\r\n    //Private: Close the drop down options\r\n    function open(obj) {\r\n\r\n        var $this = obj.find('.dd-select'),\r\n            ddOptions = $this.siblings('.dd-options'),\r\n            ddPointer = $this.find('.dd-pointer'),\r\n            wasOpen = ddOptions.is(':visible');\r\n\r\n        //Close all open options (multiple plugins) on the page\r\n        $('.dd-click-off-close').not(ddOptions).slideUp(50);\r\n        $('.dd-pointer').removeClass('dd-pointer-up');\r\n\r\n        if (wasOpen) {\r\n            ddOptions.slideUp('fast');\r\n            ddPointer.removeClass('dd-pointer-up');\r\n        }\r\n        else {\r\n            ddOptions.slideDown('fast');\r\n            ddPointer.addClass('dd-pointer-up');\r\n        }\r\n\r\n        //Fix text height (i.e. display title in center), if there is no description\r\n        adjustOptionsHeight(obj);\r\n    }\r\n\r\n    //Private: Close the drop down options\r\n    function close(obj) {\r\n        //Close drop down and adjust pointer direction\r\n        obj.find('.dd-options').slideUp(50);\r\n        obj.find('.dd-pointer').removeClass('dd-pointer-up').removeClass('dd-pointer-up');\r\n    }\r\n\r\n    //Private: Adjust appearence for selected option (move title to middle), when no desripction\r\n    function adjustSelectedHeight(obj) {\r\n\r\n        //Get height of dd-selected\r\n        var lSHeight = obj.find('.dd-select').css('height');\r\n\r\n        //Check if there is selected description\r\n        var descriptionSelected = obj.find('.dd-selected-description');\r\n        var imgSelected = obj.find('.dd-selected-image');\r\n        if (descriptionSelected.length <= 0 && imgSelected.length > 0) {\r\n            obj.find('.dd-selected-text').css('lineHeight', lSHeight);\r\n        }\r\n    }\r\n\r\n    //Private: Adjust appearence for drop down options (move title to middle), when no desripction\r\n    function adjustOptionsHeight(obj) {\r\n        obj.find('.dd-option').each(function () {\r\n            var $this = $(this);\r\n            var lOHeight = $this.css('height');\r\n            var descriptionOption = $this.find('.dd-option-description');\r\n            var imgOption = obj.find('.dd-option-image');\r\n            if (descriptionOption.length <= 0 && imgOption.length > 0) {\r\n                $this.find('.dd-option-text').css('lineHeight', lOHeight);\r\n            }\r\n        });\r\n    }\r\n\r\n})(jQuery);"]],"start1":0,"start2":0,"length1":0,"length2":14773}]],"length":14773}

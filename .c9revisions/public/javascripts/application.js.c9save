{"ts":1357682219011,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"///////////////////////////////////////////////////////////////////////////////\n// @file         : application.js                                            //\n// @summary      : client side application                                   //\n// @version      : 0.14                                                      //\n// @project      : Node.JS + Express boilerplate for cloud9 and appFog       //\n// @description  :                                                           //\n// @author       : Benjamin Maggi                                            //\n// @email        : benjaminmaggi@gmail.com                                   //\n// @date         : 12 Dec 2012                                               //\n// @dependencies                                                             //\n//  jQuery       : 1.8.2                                                     //\n//  jQuery.UI    : 1.9.1                                                     //\n//  ICanHaz      : 0.10                                                      //\n//  Sammy        : 0.7.2                                                     //\n// ------------------------------------------------------------------------- //\n//                                                                           //\n// @copyright Copyright 2012 Benjamin Maggi, all rights reserved.            //\n//                                                                           //\n//                                                                           //\n// License:                                                                  //\n// This program is free software; you can redistribute it                    //\n// and/or modify it under the terms of the GNU General Public                //\n// License as published by the Free Software Foundation;                     //\n// either version 2 of the License, or (at your option) any                  //\n// later version.                                                            //\n//                                                                           //\n// This program is distributed in the hope that it will be useful,           //\n// but WITHOUT ANY WARRANTY; without even the implied warranty of            //\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             //\n// GNU General Public License for more details.                              //\n//                                                                           //\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Main App closure                                                          //\n// @param {Function} window.jQuery || window.Zepto JS libraries              //\n///////////////////////////////////////////////////////////////////////////////\n;(function($) {\n    \"use strict\";\n    ///////////////////////////////////////////////////////////////////////////\n    // Station class                                                         //\n    // This object stores all information regarding the weather station      //\n    // It has no data bindings to UI                                         //\n    ///////////////////////////////////////////////////////////////////////////\n    var Station = function(arg) {\n        this.setup(arg);\n    };   \n    $.extend(Station.prototype, {\n        module: { \n            VERSION: \"0.11\",\n            license: {},\n            dependencies: {},\n            author: \"BM\",\n        },\n        properties: {\n            name: '',\n            id: 0,\n            _id: 0,\n            type: '',\n            country: '',\n            state: '',\n            city: '',\n            latitude: 0,\n            longitude: 0,\n            magic: 1234,\n            sensors: [],\n            created: null,\n            lastUpdate: new Date(),\n            lastAccess: new Date(),\n            isReady: false,\n            overview: true,\n            mine: true,\n            temperature: {\n                value: 0, \n                unit: 'C'\n            },\n            feelslike: {},\n            humidity: { \n                value: 0, \n                dewpoint: 0, \n                unit: 'RH' \n            },\n            wind: { \n                value: 0, \n                direction: 'SE', \n                degrees: 150, \n                unit: 'KMH' \n            },\n            rainfall: { \n                value: 0, \n                unit: 'MM' \n            },\n            pressure: { \n                value: 0, \n                unit: 'INHG', \n                type: 'relative' \n            }, \n            visibility: { \n                value: 0, \n                unit: 'KM' \n            },\n            astronomy: { \n                sunrise: \"08:01\", \n                sunset: \"16:42\" \n            },\n            forecast:[\n                {\n                    day: \"Today\",\n                    condition: \"\",\n                    high_temperature: 0.00,\n                    low_temperature: 0.00\n                },\n                {\n                    day: \"Tomorrow\",\n                    condition: \"\",\n                    high_temperature: 0.00,\n                    low_temperature: 0.00\n                }\n            ],\n        },\n        setup: function (options) {\n            var options = $.extend({}, this.properties, options);\n            var that = this;\n            that.id = options._id;\n            $.ajax({\n                url: \"/station/getbyid/\" + options._id,\n                type: \"GET\",\n                dataType: \"json\",\n                success: function (data, textStatus, jqXHR) {\n                    that.properties = $.extend({}, that.properties, data);\n                    that.properties.id = that.properties._id;\n                    options.onLoad(that.properties);\n                },\n                \n                error: function (jqXHR, status, error) {\n                    console.log(jqXHR.responseText);\n                },\n                complete: function () {                                \n                }\n            });\n        },\n        /*\n        setupx: function (a) {\n            var that = this;\n            that.id = a._id;\n            $.ajax({\n                url: \"/station/getbyid/\" + a._id,\n                type: \"GET\",\n                dataType: \"json\",\n                success: function (data, textStatus, jqXHR) {\n                    //console.log(\"Station[\" + data._id + \"] successfully created\");\n                    that._id = data._id,\n                    that.id = data._id,\n                    that.name = data.name;\n                    that.type = data.type;\n                    that.temperature = data.temperature;\n                    that.humidity = data.humidity;\n                    that.latitude = data.latitude;\n                    that.longitude = data.longitude;\n                    //Preserve the original defaults by passing an empty object as the target\n                    //that = $.extend({}, that, data);\n                    a.onLoad(that);\n                },\n                \n                error: function (b) {\n                    var c = $.parseJSON(b.responseText);\n                    alert(c.errors);\n                },\n                complete: function () {                                \n                }\n            });\n        },\n        */\n        update: function (a) {\n            var that = this;\n            $.ajax({\n                url: \"/station/update/\" + that.id,\n                type: \"post\",\n                dataType: \"json\",\n                data: that,\n                success: function(data, textStatus, jqXHR) {\n                    console.log(\"data back: \" + JSON.stringify(data));\n                },\n                error: function (b) {\n                    var c = $.parseJSON(b.responseText);\n                    alert(c.errors);\n                },\n                complete: function () {                                \n                }\n            });\n        },        \n        // getters\n        getTemperature: function () { \n            return this.temperature; \n        },\n        getPressure: function () { \n            return this.pressure; \n        },\n        getHumidity: function () { \n            return this.humidity; \n        },\n        getWind:  function () { \n            return this.wind; \n        },\n        getWindDirection:  function () { \n            return this.wind.direction; \n        },\n        // setters\n        setTemperature: function (temperature) {\n            this.temperature = temperature; \n        },\n        setPressure: function (pressure) { \n            this.pressure = pressure; \n        },\n        setHumidity: function (humidity) { \n            this.humidity = humidity; \n        },\n        setWind:  function (wind) { \n            this.wind = wind; \n        },\n    });\n    ///////////////////////////////////////////////////////////////////////////\n    // Subscription class                                                    //\n    ///////////////////////////////////////////////////////////////////////////\n    var myApplication = function(options) {\n        this.init(options);\n    };\n    $.extend(myApplication.prototype, {\n        module: { \n            VERSION: \"0.10\",\n            license: {},\n            dependencies: {},\n            author: \"\",\n        },\n        settings: $.observable({\n            timeout: 500,\n            debug: true,\n            producction: false,\n            instances: 1\n        }),\n        properties: {\n            _id: null,\n            name: 'lab',\n            type: 'subscription',\n            magic: null,\n            created: null,\n            lastUpdate: null,\n            lastAccess: null,\n            isReady: false,\n            stations: [],\n            order: [],\n            selected: null,\n        },\n        onSetup: null,\n        init: function (options) {\n            var that = this;\n            //Preserve the original defaults by passing an empty object as the target\n            var options = $.extend({}, this.properties, options);\n            $.ajax({\n                url: \"/subscription/getbyid/\" + options._id,\n                type: \"GET\",\n                dataType: \"json\",\n                success: function (data, textStatus, jqXHR) {\n                    that.properties = $.extend({}, that.properties, data);\n                    that.setup(that.properties);\n                    options.callback(that.properties);\n                },\n                error: function (jqXHR, status, error) {\n                    console.log(jqXHR.responseText);\n                },\n                complete: function () {\n                }\n            });\n        },\n        setup: function (properties) {\n            var that = this;\n            this.properties.order.forEach(function(_id) {\n                $.ajax({\n                    url: \"/station/getbyid/\" + _id,\n                    type: \"GET\",\n                    dataType: \"json\",\n                    success: function (data, textStatus, jqXHR) {\n                        that.properties.stations[data._id] = new Station({_id: data._id, type: data.type, onLoad: onLoad}); //that.stations[b[i]._id] =                   \n                        function onLoad(station) {\n                            station.isReady = true;\n                            //callback(station);\n                        }\n                    },\n                    error: function (jqXHR, status, error) {\n                        console.log(jqXHR.responseText);\n                    },\n                    complete: function () {\n                    }\n                });\n            });\n        },\n        getAllStations: function(options, callback)\n        {\n            var that = this;\n            this.properties.order.forEach(function(_id) {\n                $.ajax({\n                    url: \"/station/getbyid/\" + _id,\n                    type: \"GET\",\n                    dataType: \"json\",\n                    success: function (data, textStatus, jqXHR) {\n                        that.properties.stations[data._id] = new Station({_id: data._id, type: data.type, onLoad: onLoad}); //that.stations[b[i]._id] =                   \n                        function onLoad(station) {\n                            station.isReady = true;\n                            callback(station);\n                        }\n                    },\n                    error: function (jqXHR, status, error) {\n                        console.log(jqXHR.responseText);\n                    },\n                    complete: function () {\n                    }\n                });\n            });\n        },\n        setup2: function (a) {\n            var that = this;\n            //this.properties = $.observable(this.properties);\n            this.onSetup = a.onSetup;\n            this.properties.order.forEach(function(_id) {\n                console.log(\"loading station _id: \" + _id);\n                $.ajax({\n                    url: \"/station/getbyid/\" + _id,\n                    type: \"GET\",\n                    dataType: \"json\",\n                    success: function (data, textStatus, jqXHR) {\n                        console.log(\"/station/getbyid---: \" + JSON.stringify(data._id));\n                        that.properties.stations[data._id] = new Station({_id: data._id, type: data.type, onLoad: onLoad}); //that.stations[b[i]._id] = \n                        console.log(\"Attaching station id: \" + that.properties.stations[data._id].id);\n                        \n                        function onLoad(station) {\n                            station.isReady = true;\n                            console.log(\"is onLoad ready: \" + station.isReady + \" id: \" + station._id);\n                            a.onSetup(station);\n                        }\n                    },\n                    error: function (jqXHR, status, error) {\n                        console.log(jqXHR.responseText);\n                    },\n                    complete: function () {\n                    }\n                });\n            });\n        },\n        setupOLD: function (a) {\n            this.onSetup = a.onSetup;\n            var that = this;\n            $.ajax({\n                url: \"/station/getall\",\n                type: \"GET\",\n                dataType: \"json\",\n                success: function (b) {\n                    for (var i = 0; i < b.length; i++) {\n                        that.properties.stations[b[i]._id] = new Station({_id: b[i]._id, type: b[i].type, onLoad: onLoad}); //that.stations[b[i]._id] = \n                        console.log(\"Attaching station id: \" + that.properties.stations[b[i]._id].id);\n                    }\n                    function onLoad(station) {\n                        station.isReady = true;\n                        console.log(\"is onLoad ready: \" + station.isReady + \" id: \" + station._id);\n                        a.onSetup(station);\n                    }\n                },\n                error: function (jqXHR, status, error) {\n                    console.log(jqXHR.responseText);\n                },\n                complete: function () {                                \n                }\n            });\n        },\n        listStations: function (a) {\n            for (var key in this.properties.stations)\n            {\n                if (this.properties.stations.hasOwnProperty(key))\n                {\n                    console.log(\"key: \" + key);\n                }\n            }\n            return !1;\n        },\n        getStationById: function(id) {\n            console.log(\"getStationById(%s)\", id);\n            console.log(\"getStationById(%s) = %s\", id, JSON.stringify(this.properties.stations[id]));\n            return this.properties.stations[id].properties;\n        },\n        getAllStationsIds: function() {\n            var stations = [];\n            for (var station in this.properties.stations)\n            {\n                if (this.properties.stations.hasOwnProperty(station))\n                {\n                    stations.push(station);\n                }\n            }\n            return stations;\n        },\n        getStations:  function (callback) {\n            var that = this;\n            $.ajax({\n                url: \"/getStations\",\n                type: \"GET\",\n                dataType: \"json\",\n                success: function (data, textStatus, jqXHR) {\n                    callback(data);\n                },\n                error: function (jqXHR, status, error) {\n                    //var c = $.parseJSON(jqXHR);\n                    console.log(jqXHR.responseText);\n                }\n            });\n        },\n        getSelected: function() {\n          return this.properties.selected;\n        },\n        removeStations: function(ids, callback) {\n            for (var id in ids)\n            {\n                if (ids.hasOwnProperty(id))\n                {\n                    this.removeStation(id, function(station) {\n                    });\n                }\n            }\n        },\n        removeStation: function(id, callback) {\n            var that = this;\n            $.ajax({\n                url: \"/station/remove/\" + id,\n                type: \"delete\",\n                dataType: \"json\",\n                data: {},\n                success: function (data, textStatus, jqXHR) {\n                    delete that.properties.stations[data._id];\n                    console.log(\"removed id: \" + JSON.stringify(data));\n                    callback(data);\n                },\n                error: function (jqXHR, status, error) {\n                    var c = $.parseJSON(jqXHR);\n                    console.log(jqXHR.responseText);\n                }\n            }), !1;\n        },\n        addStation: function(station, callback) {\n            var that = this;\n            $.ajax({\n                url: \"/station/add\",\n                type: \"POST\",\n                dataType: \"json\",\n                data: station,\n                success: function (data, textStatus, jqXHR) {\n                    //new Station({_id: data._id, type: data.type, onLoad: onLoad});\n                    that.properties.stations[data._id] = new Station({_id: data._id, type: data.type, onLoad: onLoad});\n                    function onLoad(station) {\n                        station.isReady = true;\n                        callback(data);\n                    }\n                },\n                error: function (jqXHR, status, error) {\n                    console.log(jqXHR.responseText);\n                }\n            }), !1;\n        },\n        setSelected: function(id) {\n            var that = this;\n            that.update(onUpdate);\n            function onUpdate(data)\n            {\n                that.selected = id;\n                console.log(\"subscription update ok! result: \" + data);\n            };\n        },\n        update: function(callback) {\n            var that = this;\n            console.log(\"subscription update\");\n            $.ajax({\n                url: \"/subscription/update/\" + this._id,\n                dataType: \"json\",\n                type: \"put\",\n                data: that,\n                success: function (data, textStatus, jqXHR) {\n                    callback(data);\n                },\n                error: function (jqXHR, status, error) {\n                    var c = $.parseJSON(jqXHR);\n                    console.log(jqXHR.responseText);\n                },\n            });\n        },\n    });\n\n\n    ///////////////////////////////////////////////////////////////////////////\n    // Sammy.JS application                                                  //\n    ///////////////////////////////////////////////////////////////////////////\n    var app = $.sammy(function() {\n        //this.element_selector = '#main';\n        this.bind('getSubscription', function(e, data) {\n            //console.log(\"getSubscription\");\n            MyApp.subscription = new myApplication({onSetup: onSetup});\n            function onSetup(a) {\n                console.log(\"onSetup: \" + JSON.stringify(a));\n                $(\"#sites\").append(ich.site_template(a));\n                $(\"#s\" + a.id).html(ich.station_preview_template(a));\n                //MyApp.meldSidebar();\n            };\n        });\n        this.bind(\"station.setup\", function(e, data) {\n            console.log(\"station.setup: \" + JSON.stringify(data));\n            var site = $(\"#s\" + data.id);\n            if (site.hasClass(\"current\"))\n            {\n                return !0;\n            }\n            var station_template = ich.site_template(data);\n            $(station_template).appendTo('#sites').hide().fadeIn('slow');\n            //$(\"#sites\").append(ich.site_template(data));\n            $(\"#s\" + data.id).html(ich.station_preview_template(data));\n            //this.trigger(\"show_station.g\");\n            //this.trigger('showSite', {my_data: this.params});\n            $(\"div.site.current\").removeClass(\"current\");\n            site.addClass(\"current\");\n            $(\"#data\").html(ich.site_data_template(data)); \n            $(\"body\").addClass(\"view-nav\");\n        });\n        this.bind('showSite', function(e, data) {\n            var a = this;\n            var b = $(\"#s\" + data['my_data'].id);\n            if (b.hasClass(\"current\")) return !0;\n            $(\"div.site.current\").removeClass(\"current\");\n            b.addClass(\"current\");\n            $(\"#data\").html(ich.site_data_template({title: \"hello\", id: 1234, mine: false}));\n            //$(\"#data\").html(ich.site_data_template(this)), \n            //$(\"body\").addClass(\"view-nav\");\n            //alert(data['my_data'].id);\n        });\n        this.bind(\"show_station.g\", function(e, data) {\n            console.log(\"show_station.g: \" + JSON.stringify(data));\n            var station = $(\"#s\" + data.id);\n            if (station.hasClass(\"current\"))\n            {\n                return !0;\n            }\n            $(\"div.site.current\").removeClass(\"current\");\n            station.addClass(\"current\");\n            $(\"#data\").html(ich.site_data_template(MyApp.subscription.getStationById(data.id))); \n            $(\"body\").addClass(\"view-nav\");\n        });\n        this.bind(\"show_panel.g\", function (e, data) {\n            console.log(\"show_panel.g: \" + JSON.stringify(data));\n            var b = this;\n            var c = $(\"#s\" + data.id);\n            var d = data == c.data(\"panel\") ? $(\"#site_content div.display\").scrollTop() : 0;\n            b.trigger(\"show_station.g\", data), \n            c.data(\"panel\", data);\n            $(\"#data div.nav li.current\").removeClass(\"current\"); \n            $('#data div.nav a[href=\"#/station/' + data.id + \"/\" + data.path + '\"]').closest(\"li\").addClass(\"current\");\n            switch (data.path) {\n                case \"overview\":\n                    console.log(\"[overview]\");\n                    $(\"#site_content\").html(ich.overview_template(MyApp.subscription.getStationById(data.id)));\n                    var placeholder = $(\"#placeholder\");\n                    var d1 = [];\n                    for (var i = 0; i < Math.PI * 2; i += 0.25)\n                        d1.push([i, Math.sin(i)]);\n                    \n                    var d2 = [];\n                    for (var i = 0; i < Math.PI * 2; i += 0.25)\n                        d2.push([i, Math.cos(i)]);\n                \n                    var d3 = [];\n                    for (var i = 0; i < Math.PI * 2; i += 0.1)\n                        d3.push([i, Math.tan(i)]);\n                        \n                    var options = {\n                        series: {\n                            lines: { show: true },\n                            points: { show: true }\n                        },\n                        xaxis: {\n                            ticks: [0, [Math.PI/2, \"\\u03c0/2\"], [Math.PI, \"\\u03c0\"], [Math.PI * 3/2, \"3\\u03c0/2\"], [Math.PI * 2, \"2\\u03c0\"]]\n                        },\n                        yaxis: {\n                            ticks: 10,\n                            min: -2,\n                            max: 2\n                        },\n                        grid: {\n                            backgroundColor: { colors: [\"#fff\", \"#eee\"] }\n                        }\n                    }\n                    \n                    var data = [\n                        { label: \"sin(x)\",  data: d1},\n                        { label: \"cos(x)\",  data: d2},\n                        { label: \"tan(x)\",  data: d3}\n                    ];\n                    //$.plot($(\"#placeholder\"), [ [[0, 0], [1, 1], , [2, 3]] ], { yaxis: { max: 1 } });\n                    var plot = $.plot(placeholder, data, options);\n                    \n                    break;\n                case \"code\":\n                    console.log(\"[code]\");\n                    $(\"#site_content\").html(ich.my_info_template(this));\n                    break;\n                case \"live\":\n                    var e = this;\n                    $(\"#site_content\").html(ich.live_data_template(this))\n                    var options = {\n                        zoom: 8,\n                        center: new google.maps.LatLng(-34.6036, -58.3817),\n                        mapTypeId: google.maps.MapTypeId.ROADMAP\n                    };\n                    var map = new window.map({id: \"map_wrapper\", latitude: -34.6036, longitude: -58.3817, mapOptions: options});\n                    break;\n                case \"settings\":\n                    console.log(\"[settings]\");\n                    $(\"#site_content\").html(ich.station_settings_template(MyApp.subscription.getStationById(data.id)));\n                    break;\n                case \"sensors\":\n                    $(\"#site_content\").html(ich.station_sensors_template(MyApp.subscription.getStationById(data.id)));\n                    var temperature_gauge = new JustGage({\n                      id: \"temperature.gauge\", \n                      value: getRandomInt(0, 100), \n                      min: -30,\n                      max: 100,\n                      title: \"Temperature\",\n                      label: \"C°\"\n                    });\n                    var humidith_gauge = new JustGage({\n                      id: \"humidity.gauge\", \n                      value: getRandomInt(0, 100), \n                      min: 0,\n                      max: 100,\n                      levelColors: [\"#6996D3\", \"#0F4FA8\", \"#05316D\"], \n                      title: \"Humidity\",\n                      label: \"RH\"\n                    });\n                    setInterval(function() {\n                        temperature_gauge.refresh(getRandomInt(50, 100));\n                        humidith_gauge.refresh(getRandomInt(70, 100));\n                    }, 2500);\n                    break;\n                case \"terminal\":\n                    $(\"#site_content\").html(ich.station_terminal_template(MyApp.subscription.getStationById(data.id)));\n                    $(function($, undefined) {\n                        $('#terminal').terminal( function(command, term) {\n                            if (command !== '') {\n                                /*\n                                try {\n                                    var result = window.eval(command);\n                                    if (result !== undefined) {\n                                        term.echo(new String(result));\n                                    }\n                                } catch(e) {\n                                    term.error(new String(e));\n                                }\n                                */\n                                var shellstring = command.split(\" \");\n                                var cmd = shellstring.splice(0,1).toString();\n                                var args = [];\n                                shellstring.forEach(function(arg) {\n                                    args.push(arg);\n                                });\n                                MyApp.properties.socket.emit('consoleio', { message: 'exec', command: cmd, arguments: args})\n                                term.pause();\n                            } else {\n                                term.echo('');\n                            }\n                        }, {\n                        greetings: '[[b;#ccc;#750775]Node Terminal]',\n                        name: 'consoleio',\n                        height: 400,\n                        prompt: '# ',\n                        onInit: function(terminal) { console.log(\"console.init()\"); window.terminal = terminal || {} }\n                        });\n                    });\n                    break;\n                case \"srcedit\":\n                    $(\"#site_content\").html(ich.station_srceditor_template(MyApp.subscription.getStationById(data.id)));\n                    var editor = CodeMirror.fromTextArea(document.getElementById(\"code_editor\"), {\n                        lineNumbers: true,\n                        theme: 'monokai'\n                    });\n                    break;\n            }\n            $(\"body\").addClass(\"view-panel\");\n            $(\"#site_content div.display\").scrollTop(d);\n        });\n        this.bind(\"station_teardown.g\", function(event, data) {\n            console.log(\"station_teardown.g id: \" + JSON.stringify(data));\n            var a = $(\"#s\" + data.id);//.css({height: 0,opacity: 0});\n            setTimeout(function() {\n                a.hide('slow', function(){ $(this).remove();});\n                //a.hide('slow', function(){ $(this).remove();});\n                //a.remove()\n            }, 500);\n            //delete Gauges.sites[this.id]\n        });\n        this.get(/\\#\\/sites\\/(.*)/, function () {\n            //this.redirect(\"#\", \"gauges\", this.params.splat)\n            alert(this.params.splat);\n        });\n        this.get(\"#/\", function (a) {\n            $(\"body\").removeClass(\"no_cancel\").removeClass(\"my_account\");\n            $.trim($(\"#data\").html()) == \"\" && $(\"#sites div.site:first a\").length > 0 && a.redirect($(\"#sites div.site:first a\").attr(\"href\"))\n        });\n        ///////////////////////////////////////////////////////////////////////\n        // Account Routes                                                    //\n        ///////////////////////////////////////////////////////////////////////\n        this.get(\"#/account\", function() {\n            $(\"body\").removeClass(\"adding\"), \n            $.ajax({\n                url: \"/subscription\",\n                dataType: \"json\",\n                success: function(a) {\n                    //Gauges.subscription = new Subscription(a.subscription)\n                }\n            });\n            $(\"#sites div.current\").removeClass(\"current\"), \n            $(\"#data\").html(ich.account_template(MyApp.user)), \n            $('div.nav a[href=\"#/account\"]').closest(\"li\").addClass(\"current\"), \n            $(\"#site_content\").html(ich.my_info_template(MyApp.user))\n        });\n        this.get(\"#/account/clients\", function() {\n            $(\"body\").removeClass(\"adding\"), \n            $(\"#sites div.current\").removeClass(\"current\"), \n            $(\"#data\").html(ich.account_template(MyApp.user)), \n            $('div.nav a[href=\"#/account/clients\"]').closest(\"li\").addClass(\"current\"), \n            $(\"#site_content\").html(ich.clients_template(MyApp.user)), \n            $(\"#site_content\").find(\"input[title]\").labelize(), \n            MyApp.clients == null ? $.ajax({\n                url: \"/clients\",\n                dataType: \"json\",\n                type: \"get\",\n                success: function(data, textStatus, jqXHR) {\n                    MyApp.clients = data.clients, \n                    $(\"#clients_list\").removeClass(\"loading\").html(ich.clients_list_template(MyApp))\n                },\n                error: function(jqXHR, status, error) {\n                    $(\"#clients_list\").removeClass(\"loading\").addClass(\"empty\").text(\"Could not load API Keys\");\n                }\n            }) : $(\"#clients_list\").removeClass(\"loading\").html(ich.clients_list_template(MyApp));\n        });\n        this.post(\"#/account/clients\", function() {\n            console.log(\"targent: \" + this.target);\n            window.kaka = this.target;\n            var a = $(this.target).removeErrors(), \n            b = a.find(\"button span\");\n            clearTimeout(b.data(\"timeout\")), \n            b.data(\"text\") === undefined && b.data(\"text\", b.text()), \n            b.text(\"Creating...\"), \n            $.ajax({\n                url: \"/clients\",\n                dataType: \"json\",\n                type: \"post\",\n                data: {\n                    description: this.params.description\n                },\n                success: function(b) {\n                    MyApp.clients == null && (MyApp.clients = []), \n                    MyApp.clients.push(b.client), \n                    a.find(\"input[type=text]\").val(\"\").blur(), \n                    $(\"#clients_list\").removeClass(\"loading\").html(ich.clients_list_template(MyApp))\n                },\n                error: function (jqXHR, status, error) {\n                    //var c = $.parseJSON(jqXHR);\n                    console.log(jqXHR.responseText);\n                    //a.displayErrors(\"jqXHR.responseText\"), \n                    a.displayErrors({description: [\"Could not find that Email\"]});\n                    b.text(b.data(\"text\"))\n                },    \n                /*error: function(c) {\n                    \n                    var d = $.parseJSON(c.responseText);\n                    a.displayErrors(d.errors), b.text(b.data(\"text\"))\n                },*/\n                complete: function() {\n                    b.text(\"Created\"), \n                    setTimeout(function() {\n                        b.text(b.data(\"text\"))\n                    }, 2e3)\n                }\n            })\n        });\n        this.del(\"#/account/clients/:key\", function() {\n            var a = $(this.target).removeErrors(), \n            b = a.find(\"button span\");\n            clearTimeout(b.data(\"timeout\")), \n            b.data(\"text\") === undefined && b.data(\"text\", b.text()), b.text(\"Removing\"), \n            $.ajax({\n                url: \"/clients/\" + this.params.key,\n                dataType: \"json\",\n                type: \"delete\",\n                success: function(a) {\n                    MyApp.clients = $.compact($.map(MyApp.clients, function(b) {\n                        if (b.key != a.client.key)\n                            return b\n                    })), \n                    $(\"#clients_list\").html(ich.clients_list_template(MyApp))\n                }\n            })\n        });\n        ///////////////////////////////////////////////////////////////////////\n        // Session Routes                                                    //\n        ///////////////////////////////////////////////////////////////////////\n        this.get('#/sign_out', function() {\n            $.ajax({\n                    url: \"/signout\",\n                    type: \"GET\",\n                    complete: function () {\n                        window.location = \"/signin\";\n                    }\n            });\n            $(\"body\").addClass(\"loading\").removeClass(\"loaded\");\n        });\n        ///////////////////////////////////////////////////////////////////////\n        // Station Routes                                                    //\n        ///////////////////////////////////////////////////////////////////////\n        this.get('#/station/new', function() {\n            $(\"body\").addClass(\"adding\");\n        });\n        this.post('#/station', function () {\n            var that = this;\n            var a = $(this.target).removeErrors();\n            var b = a.find(\".submit button span\");\n            clearTimeout(b.data(\"timeout\"));\n            b.data(\"text\") === undefined && b.data(\"text\", b.text()); \n            b.text(\"Adding...\");\n            $.ajax({\n                url: \"/station/add\",\n                type: \"post\",\n                dataType: \"json\",\n                data: { \n                    name: that.params.name,\n                    type: that.params.type,\n                    country: that.params.country,\n                },\n                success: function (data, textStatus, jqXHR) {\n                    //console.log(\"server respose: \" + JSON.stringify(b));\n                    var c = data;\n                    // todo use getters instead of direct property access in this case the array \n                    MyApp.subscription.stations[data._id] = new Station({_id: data._id, type: data.type, onLoad: onLoad}); //\n                    function onLoad(station) {\n                        $(\"#new_title\").val(\"\");\n                        that.trigger('station.setup', station);\n                        setTimeout(function () {\n                            window.location.hash = \"/station/\" + station._id + \"/code\";\n                            $.scrollTo(\"#s\" + station._id, 800);\n                        }, 400); \n                        console.log(\"onLoad id: \" + station._id);\n                        //$.scrollTo(\"#s\" + station._id, 800);\n                        $(\"body\").removeClass(\"adding\");\n                        a.removeErrors();\n                        //that.trigger('station.setup', station);\n                    }\n                },\n                error: function (b) {\n                    //var c = $.parseJSON(b.responseText);\n                    a.displayErrors(c.errors);\n                },\n                complete: function () {\n                    b.text(b.data(\"text\"));\n                }\n            }), !1;\n        });\n        this.get(\"#/station/:id/:path\", function () {\n            //return;\n            //var a = MyApp.stations[this.params.id];\n            console.log(\"sammy route: #/station/%s/%s\", this.params.id, this.params.path);\n            //var a = MyApp.subscription.getStationById(this.params.id);\n            //console.log(\"MyApp.subscription.getStationById = \" + JSON.stringify(a));\n            //alert(typeof this.params.id);\n            //alert(MyApp.subscription.stations[this.params.id].name);\n            var station = MyApp.subscription.getStationById(this.params.id);//stations[this.params.id];\n            //MyApp.subscription.setSelected(this.params.id);\n            console.log(\"MyApp.subscription.stations[%s].name = %s\", this.params.id, station.name);\n            //alert(\"#/station/%s/%s\",typeof a, this.params.path);\n            //this.params.path == \"overview\" && a.setRecentTraffic();\n            //this.trigger('station.setup', station);\n            //this.trigger('station.setup', MyApp.subscription.stations[this.params.id]);\n            this.trigger(\"show_panel.g\", this.params); \n            MyApp.meldSidebar();\n        });\n        this.get('#/station/:id/code/:tab', function () {\n            alert(\"caca\");\n            console.log(\"new tab params: \" + JSON.stringify(this.params));\n            var station = MyApp.subscription.stations[this.params.id];\n            console.log(\"server respose: \" + JSON.stringify(b));\n            /*\n            var a = MyApp.sites[this.params.id];\n            */        \n            //a.trigger(\"show_panel.g\", [\"code\"]); \n            $(\"#site_content div.panel\").hide();\n            $(\"#site_content ul.group_options li\").removeClass(\"current\"); \n            $(\"#site_content div.panel.\" + this.params.tab).show();\n            $(\"#site_content ul.group_options li.\" + this.params.tab).addClass(\"current\"); \n            MyApp.meldSidebar();\n        });\n        this.get(\"#/deleting\", function() {\n        });\n        this.del(\"#/station/remove/:id\", function() {\n            var that = this;\n            var a = $(this.target).removeErrors(), b = a.find(\".submit button span\");\n            b.text(\"Deleting...\"), window.location.hash = \"/deleting\", \n            $.ajax({\n                url: \"/station/remove/\" + this.params.id,\n                dataType: \"json\",\n                type: \"delete\",\n                success: function(data, textStatus, jqXHR) {\n                    var station = data.station;\n                    console.log(\"remove server respose: \" + JSON.stringify(data));\n                    //var c = Gauges.sites[b.id];\n                    that.trigger(\"station_teardown.g\", that.params), \n                    $(\"#data\").html(ich.deleted_site_template(b)), \n                    window.location.hash = \"/\"\n                }\n        });\n    })\n        // Station routes\n    });\n    $(function() {\n        app.run();\n        //app.trigger('getSubscription', {time: new Date()});\n    });\n    \n    ///////////////////////////////////////////////////////////////////////////\n    // Main Client application                                               //\n    ///////////////////////////////////////////////////////////////////////////\n    var MyApp = {\n        module: { \n            VERSION: \"0.1.2.3\",\n            license: {},\n            dependencies: {},\n            author: \"\",\n        },\n        $: (typeof window !== 'undefined') ? window.jQuery || window.Zepto || null : null,\n        timeout: null,\n        clients: null,\n        connection_count: 0,\n        subscription: {},\n        subscriptions: [],\n        mousecoords: {\n            pageX: 0, \n            pageY: 0,\n        },\n        properties: {\n            delay: 10,\n            reconnect: true,\n            socket: null,\n            stdinp: null,\n            stdout: null,\n            stderr: null,\n        },\n        user: {\n                name: \"\", \n                id: \"\", \n                last_name: null, \n                first_name: null, \n                email: \"\",\n                subscriptions: [],\n                subscription: null,\n        },\n        init: function(options) {\n            var that = this;\n            console.log(\"MyApp.options\")\n            this.getUser({callback: gotUser})\n            \n            function gotUser(account)\n            {\n                //MyApp.subscription = new myApplication({_id: that.user.subscription, callback: onInit});\n                that.user.subscriptions.forEach(function(_id) {\n                    that.getSubscription({_id: _id, callback: gotSubscription});\n                });\n                \n                function gotSubscription(subscription) {\n                    console.log(\"subscription._id: \" + subscription._id);\n                    MyApp.subscriptions[subscription._id] = new myApplication({_id: subscription._id, callback: onInit});\n                }\n                \n                function onInit(subscription)\n                {\n                    //MyApp.subscriptions['50dfa3ce09556aa365000004'].properties.stations['50e9be722eda7b7a55000002']\n                    console.log(\"stations: \" + JSON.stringify(MyApp.subscriptions[subscription._id].properties.stations     ));\n                    \n                    /*\n                    subscription.order.forEach(function(_id) {\n                        console.log(\"station._id: \" + _id);\n                        console.log(\"names: \" + sub.selected);\n                        //$(\"#sites\").append(ich.site_template(a));\n                        //$(\"#s\" + a.id).html(ich.station_preview_template(a));\n                    });\n                    */\n                    MyApp.subscriptions[subscription._id].properties.stations.forEach(function(_id) {\n                        console.log(\"XXXXstation._id: \" + _id);\n                    });\n                }\n                /*\n                function onSetup(a) {\n                    console.log(\"onSetup: \" + JSON.stringify(a));\n                    $(\"#sites\").append(ich.site_template(a));\n                    $(\"#s\" + a.id).html(ich.station_preview_template(a));\n                    //MyApp.meldSidebar();\n                };\n                */\n            }\n            return;\n            var that = this;\n            MyApp.subscription = new myApplication({onSetup: onSetup});\n            function onSetup(a) {\n                $(\"#sites\").append(ich.site_template(a));\n                $(\"#s\" + a.id).html(ich.station_preview_template(a));\n            };\n        },\n        start: function(options) {\n            var that = this;\n            //a === 0 ? app.runRoute(\"get\", \"#/map\") : window.location.hash == \"#/\" && (window.location.hash = \"\");\n            //jQuery.get('http://laboratory.bmaggi.c9.io/cors.php', null, function(data){alert(data);});\n            // new myApplication({onSetup: onSetup});\n            \n            $.ajax({\n                url: '/application/start',\n                type: 'GET',\n                dataType: \"json\",\n                success: function(data, textStatus, jqXHR) {\n                    //that.subscription subscription: {},\n                },\n                error: function (jqXHR, status, error) {\n                    //c.removeClass(\"loading\")\n                },\n                complete: function () {\n                \n                },\n            });\n        },\n        getSubscription: function(options) {\n            var that = this;\n            console.log(\"MyApp.getSubscription(%s)\", options._id);\n            $.ajax({\n                url: \"/subscription/getbyid/\" + options._id,\n                type: \"GET\",\n                dataType: \"json\",\n                success: function (data, textStatus, jqXHR) {\n                    console.log(data);\n                    //MyApp.user.subscription = new myApplication({_id: that.user.subscription, callback: onInit});\n                    if($.isFunction(options.callback))\n                    {\n                        options.callback(data);\n                    }\n                },\n                error: function (jqXHR, status, error) {\n                    console.log(jqXHR.responseText);\n                },\n                complete: function () {\n                }\n            });\n        },\n        setSubscription: function(_id) {\n            var that = this;\n            $.ajax({\n                url: \"/account/subscription\",\n                type: \"PUT\",\n                dataType: \"json\",\n                data: {subscription: _id},\n                success: function (data, textStatus, jqXHR) {\n                    that.user.subscription = data.subscription;\n                },\n                error: function (jqXHR, status, error) {\n                    console.log(jqXHR.responseText);\n                },\n                complete: function () {                                \n                }\n            });      \n        },\n        createSubscription: function(options) {\n            var that = this;\n            var options = $.extend({}, this.properties, options);\n            $.ajax({\n                url: \"/subscription/create\",\n                type: \"POST\",\n                dataType: \"json\",\n                data: options,\n                success: function (data, textStatus, jqXHR) {\n                    that.properties = $.extend({}, that.properties, data);\n                    that.properties.isReady = true;\n                },\n                error: function (jqXHR, status, error) {\n                    console.log(jqXHR.responseText);\n                },\n                complete: function () {                                \n                }\n            });    \n        },\n        reset: function () {},\n        setUser: function (a) {\n            //this.user = a.user, a.subscription && (this.subscription = new Subscription(a.subscription))\n        },\n        getUser: function(options) {\n            var that = this;\n            console.log(\"getUser\");\n            $.ajax({\n                url: \"/account/getAccount\",\n                type: \"GET\",\n                dataType: \"json\",\n                success: function (data, textStatus, jqXHR) {\n                    that.user = $.extend({}, that.user, data);\n                    options.callback(that.user);\n                },\n                error: function (jqXHR, status, error) {\n                    console.log(jqXHR.responseText);\n                },\n            });    \n        },\n        getSettings: function(a) {\n                /*\n                $(\"#sites div.current\").removeClass(\"current\"), \n                $(\"#data\").html(ich.account_template(Gauges.user)), \n                $('div.nav a[href=\"#/account\"]').closest(\"li\").addClass(\"current\"), \n                $(\"#site_content\").html(ich.my_info_template(Gauges.user))  \n                */\n        },\n        meldSidebar: function () {\n            var a = $(\"#sites div.current\"),\n                b = $(\"#data\");\n            $(window).scrollTop() == 0 ? $(\"#sites\").removeClass(\"topcut\") : $(\"#sites\").addClass(\"topcut\"), $(\"#sites\").height() > b.outerHeight() ? $(\"#sites\").addClass(\"bottomcut\") : $(\"#sites\").removeClass(\"bottomcut\");\n            if (a.length > 0) {\n                var c = a.offset().top,\n                    d = c + a.outerHeight(),\n                    e = b.offset().top,\n                    f = e + b.outerHeight(),\n                    g = a.attr(\"id\") == $(\"#sites > div:first\").attr(\"id\") ? 0 : 10;\n                a.length > 0 && c >= e + g && d < f - 10 ? $(\"#sites\").addClass(\"meld\") : $(\"#sites\").removeClass(\"meld\")\n                }\n        },\n        resize: function() {\n            console.log(\"resize\");\n            MyApp.meldSidebar();\n            \n            //$(\"#full_map\").is(\":visible\") && (Gauges.resize_timeout && clearTimeout(Gauges.resize_timeout), \n            //Gauges.resize_timeout = setTimeout(Gauges.showScreenMap, 300));\n        },\n        formatNumber: function (a) {\n            a += \"\";\n            var b = /(\\d+)(\\d{3})/;\n            while (b.test(a)) a = a.replace(b, \"$1,$2\");  // ',' thousand separator\n            return a\n        },\n        parseQueryString: function (a) {\n            if (a.indexOf(\"?\") == -1) return {\n                date: \"recent\"\n            };\n            var b = {};\n            return _.each(a.split(\"?\")[1].split(\"&\"), function (a) {\n                var c = a.split(\"=\");\n                b[c[0]] = c[1]\n            }), b\n        },\n        overview: function () {\n            return {\n                views: this.formatNumber(this.today.views),\n                people: this.formatNumber(this.today.people)\n            }\n        },\n        domready: function() {\n            console.log(\"DOMContentLoaded starting MyApp.version: %f\", this.module.VERSION);\n            this.init({user: 'uid'});\n            $(\"body\").height(0);\n            $(\"#data\").html(ich.greetings_template(this));\n        }\n    };\n    MyApp = MyApp || {};\n\n    ///////////////////////////////////////////////////////////////////////////\n    // Use CommonJS if applicable                                            //\n    ///////////////////////////////////////////////////////////////////////////\n    console.log(\"using commons\")\n    if (typeof require !== 'undefined') {\n        //module.exports = myApplication;\n    } else {\n        // else attach it to the window\n        console.log(\"attachinng plugin\")\n        window.MyApp = MyApp;\n    }\n    if (typeof document !== 'undefined') {\n        if (MyApp.$) {\n            MyApp.$(function () {\n                MyApp.domready();\n            });\n        } else {\n            document.addEventListener('DOMContentLoaded', function () {\n                MyApp.domready();\n            }, true);\n        }\n    }\n})(window.jQuery || window.Zepto);\n\n///////////////////////////////////////////////////////////////////////////////\n// jQuery on document ready closure                                          //\n// Activates UI components                                                   //\n// Sets and gets default data bindings                                       //\n///////////////////////////////////////////////////////////////////////////////\n$(document).ready(function() {\n    \"use strict\";\n    \n        ///////////////////////////////////////////////////////////////////////////\n    // UI Events & UI transformations                                        //\n    ///////////////////////////////////////////////////////////////////////////\n    $(\"#new_site a.cancel\").live(\"click\", function () {\n        return window.location.hash = \"#/\", $(\"body\").removeClass(\"adding\"), !1;\n    });\n    $(\"a.toggle_delete\").live(\"click\", function () {\n        return $(\"#site_content\").toggleClass(\"delete\"), !1;\n    });\n\n    ///////////////////////////////////////////////////////////////////////////\n    // Custom jQuery Functions                                               //\n    ///////////////////////////////////////////////////////////////////////////\n    $.fn.displayErrors = function(a, b) {\n        var c = this.removeErrors();\n        c.parent().addClass(\"error\");\n        for (var key in a) {\n            var d = b ? b + \"[\" + key + \"]\" : key;\n            var e = a[key].join(\", \");\n            console.log(\"a[%s] = %s\", key, e);            \n            var f = '<strong class=\"error_explanation\">' + e + \"</strong>\";\n            c.find('[name=\"' + d + '\"]').addClass(\"error\").closest(\"p\").append(f);\n        }\n        var g = c.closest(\"section\");\n        return g.length > 0 && g.trigger(\"resize.g\", [c.closest(\".panel\").height()]), this;\n    };\n    $.fn.removeErrors = function() {\n        this.parent().removeClass(\"error\").find(\"input.error\").removeClass(\"error\"), this.find(\"strong.error_explanation\").remove();\n        var a = this.closest(\"section\");\n        return a.length > 0 && a.trigger(\"resize.g\", [this.closest(\".panel\").height()]), this;\n    };\n    $.fn.labelize = function() {\n        return this.focus(function() {\n            $(this).val() == $(this).attr(\"title\") && ($(this).removeClass(\"labelized\"), $(this).val(\"\"))\n        }).blur(function() {\n            $.trim($(this).val()) == \"\" && ($(this).addClass(\"labelized\"), $(this).val($(this).attr(\"title\")))\n        }).blur().each(function() {\n            var b = $(this);\n            $(this.form).submit(function($) {\n                b.focus()\n            })\n        })\n    };\n    \n    $(\"#sites\").sortable({\n        axis: \"y\",\n        container: \"#sites\",\n        opacity: 0.5,\n        delay: 200,\n        items: \"div.site\",\n        start: function () {\n            $(\"#sites\").removeClass(\"meld\");\n        },\n        stop: function () {\n            $.ajax({\n                url: \"/subscription/reorder/\" + MyApp.user.subscription,\n                dataType: \"json\",\n                type: \"put\",\n                data: {\n                    _id: MyApp.user.subscription,\n                    ids: $.map($(this).sortable(\"toArray\"), function (a) {\n                        console.log(\"reorder: %s\", a.replace(/^s/, \"\"));\n                        return a.replace(/^s/, \"\");\n                    })\n                }\n            }),\n            MyApp.meldSidebar();\n        }\n    });\n    $('#new_date').datepicker({\n        //comment the beforeShow handler if you want to see the ugly overlay\n        beforeShow: function() {\n            setTimeout(function(){\n                $('.ui-datepicker').css('z-index', 9999); // Fix For top(Z) dialogs\n            }, 0);\n        }\n    }).val($.datepicker.formatDate('dd/m/yy', new Date()));\n    $(\"li.live .status\").text(\"off\");\n    $(\"html\").removeClass(\"live\");\n    \n    $(window).scroll(function() {\n        var a = $(window).height()\n        , docHeight = $(document).height()\n        , winScrollTop = $(window).scrollTop()\n        , wrapper = $(\"#wrapper\")\n        , body = $(\"body\");\n        \n        if (wrapper.data(\"scrollTop\") < winScrollTop) {\n            $(document.body).height(docHeight - body.css(\"padding-top\").replace(\"px\", \"\"));\n        }\n        else {\n            var f = body.height() - (wrapper.data(\"scrollTop\") - winScrollTop);\n            f >= wrapper.height() ? body.height(f) : body.height(wrapper.height());\n        }\n        wrapper.data(\"scrollTop\", winScrollTop);\n    });\n    $(window).scroll(MyApp.meldSidebar).resize(MyApp.resize);\n    $(function() {\n        //$(\"#new_site .tz\").append(TZ.select(\"new_tz\")), \n        //$(\"body\").hasClass(\"loading\") ? MyApp.start() : auth.run(), \n        document.onmousemove = function(a) {\n            window.MyApp.mousecoords.pageX = window.event ? window.event.clientX : a.pageX;\n            window.MyApp.mousecoords.pageY = window.event ? window.event.clientY : a.pageY;\n        }\n    });\n});\n\n\n///////////////////////////////////////////////////////////////////////////////\n// Google MAPS bindings                                                      //\n///////////////////////////////////////////////////////////////////////////////\n;(function($) {\n    \"use strict\";\n    window.map = function (method) {\n        if (methods[method]) {\n            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\n        } else if (typeof method === 'object' || !method) {\n            return methods.init.apply(this, arguments);\n        } else {\n            $.error('Method ' + method + ' does not exists.');\n        }\n    };\n    var methods = {};\n    //Set defauls for the control\n    var defaults = {\n        data: [],\n        icon: 'images/markers/anniversary.png',\n        title: 'Feria',\n        width: 260,\n        height: null,\n        background: \"#eee\",\n        mapOptions: {\n            zoom: 8,\n            center: new google.maps.LatLng(0, 0),\n            mapTypeId: google.maps.MapTypeId.ROADMAP\n        }\n    };\n    //Public methods \n    methods.init = function (options) {\n        //Preserve the original defaults by passing an empty object as the target\n        var options = $.extend({}, defaults, options);\n        console.log(JSON.stringify(options));\n        \n        var myLatlng = new google.maps.LatLng(options.latitude, options.longitude)\n        var image = 'images/markers/anniversary.png'  \n        \n        var map = new google.maps.Map(document.getElementById(options.id), options.mapOptions);\n\n        var marker = new google.maps.Marker({\n            position: myLatlng,\n            map: map,\n            title: 'Galaconcert',\n            icon: image\n        });\n        google.maps.event.addListener(marker, 'click', function() {\n            //infoBox.setContent(div);\n            //infoBox.open(map, marker);\n        });\n\n    };\n    //Public:\n    methods.moveMarker = function (placeName, latlng){\n        //marker.setPosition(latlng);\n        //infowindow.close();\n    };\n    //Private:\n    function makeBubble(map, index) {\n        return new InfoBubble({\n            map: map,\n            content: '<div class=\"signin\"><form action=\"/signin\" method=\"post\"><p class=\"phoneytext\">Hello There</p></form></div>',\n            position: new google.maps.LatLng(-34.6036, -58.3817),\n            shadowStyle: 1,\n            padding: 0,\n            backgroundColor: 'rgb(57,57,57)',\n            borderRadius: 4,\n            arrowSize: 10,\n            borderWidth: 1,\n            borderColor: '#2c2c2c',\n            disableAutoPan: true,\n            hideCloseButton: true,\n            arrowPosition: 30,\n            backgroundClassName: 'signin',\n            arrowStyle: 2\n        });  \n    };\n})(window.jQuery || window.Zepto);\n\n\n///////////////////////////////////////////////////////////////////////////////\n// Google MAPS bindings                                                      //\n///////////////////////////////////////////////////////////////////////////////\n$(document).ready(function() {\n    \"use strict\";\n    \n    $(function initialize() {\n        var myLatlng = new google.maps.LatLng(0, 0) //(-34.6036, -58.3817);\n        var image = 'images/markers/anniversary.png'\n        var myOptions = {\n          zoom: 1,\n          center: myLatlng,\n          mapTypeId: google.maps.MapTypeId.ROADMAP\n        }        \n        var map = new google.maps.Map(document.getElementById(\"map_canvas\"), myOptions);\n        \n        var contentString = \n            '<div id=\"infowindow\">' +\n            'Galaconcert<br />' +\n            'Jaarbeurslaan 2-6<br />' +\n            '3690 Genk' +\n            '</div>'\n        ;\n        var infowindow = new google.maps.InfoWindow();\n        \n        \n        var marker = new google.maps.Marker({\n            position: myLatlng,\n            map: map,\n            title: 'Galaconcert',\n            icon: image\n        });\n        var infowindow = new google.maps.InfoWindow(); \n        \n        var input = document.getElementById('new_location');         \n        var autocomplete = new google.maps.places.Autocomplete(input, {\n            types: [\"geocode\"]\n        });\n        autocomplete.bindTo('bounds', map); \n        \n     \n        google.maps.event.addListener(autocomplete, 'place_changed', function() {\n            infowindow.close();\n            var place = autocomplete.getPlace();\n            if (place.geometry.viewport) {\n                map.fitBounds(place.geometry.viewport);\n            } else {\n                map.setCenter(place.geometry.location);\n                map.setZoom(17);  \n            }\n            moveMarker(place.name, place.geometry.location);\n        });  \n        \n        $(input).focusin(function () {\n            $(document).keypress(function (e) {\n                if (e.which == 13) {\n                     selectFirstResult();   \n                }\n            });\n        });\n        $(input).focusout(function () {\n            if(!$(\".pac-container\").is(\":focus\") && !$(\".pac-container\").is(\":visible\"))\n                selectFirstResult();\n        });\n        function selectFirstResult() {\n            infowindow.close();\n            $(\".pac-container\").hide();\n            var firstResult = $(\".pac-container .pac-item:first\").text();\n            console.log(\"selectFirstResult: \" + firstResult)\n            \n            var geocoder = new google.maps.Geocoder();\n            geocoder.geocode({\"address\":firstResult }, function(results, status) {\n                if (status == google.maps.GeocoderStatus.OK) {\n                    var lat = results[0].geometry.location.lat(),\n                        lng = results[0].geometry.location.lng(),\n                        placeName = results[0].address_components[0].long_name,\n                        latlng = new google.maps.LatLng(lat, lng);\n                    \n                    moveMarker(placeName, latlng);\n                    $(input).val(firstResult);\n                }\n            });   \n        }\n        var div = document.createElement('DIV');\n        $(div).html(ich.infobubble_template({name: $(input).val()}));\n        google.maps.event.addListener(marker, 'click', function() {\n            //infowindow.setContent(contentString);\n            //infowindow.open(map, marker);\n            infoBubble2.setContent(div);\n            infoBubble2.open(map, marker);\n        });\n        \n        function moveMarker(placeName, latlng){\n            marker.setIcon(image);\n            marker.setPosition(latlng);\n            infowindow.close();\n            //infowindow.setContent(contentString);\n            infoBubble2.setContent(div);\n            //infowindow.open(map, marker);\n            //infoBubble2.open(map, marker);\n        }\n        \n        var infoBubble2 = new InfoBubble({\n          map: map,\n          content: '<div class=\"signin\"><form action=\"/signin\" method=\"post\"><p class=\"phoneytext\">Hello There</p></form></div>',\n          position: new google.maps.LatLng(-34.6036, -58.3817),\n          shadowStyle: 1,\n          padding: 0,\n          backgroundColor: 'rgb(57,57,57)',\n          borderRadius: 4,\n          arrowSize: 10,\n          borderWidth: 1,\n          borderColor: '#2c2c2c',\n          disableAutoPan: true,\n          hideCloseButton: true,\n          arrowPosition: 30,\n          backgroundClassName: 'signin',\n          arrowStyle: 2\n        });\n    });\n});"]],"start1":0,"start2":0,"length1":0,"length2":63508}]],"length":63508}

{"ts":1357682219213,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"///////////////////////////////////////////////////////////////////////////////\n// @file         : app.js                                                    //\n// @summary      : main application module                                   //\n// @version      : 0.1                                                       //\n// @project      : Node.JS + Express boilerplate for cloud9 and appFog       //\n// @description  :                                                           //\n// @author       : Benjamin Maggi                                            //\n// @email        : benjaminmaggi@gmail.com                                   //\n// @date         : 12 Dec 2012                                               //\n// ------------------------------------------------------------------------- //\n//                                                                           //\n// @copyright Copyright 2012 Benjamin Maggi, all rights reserved.            //\n//                                                                           //\n//                                                                           //\n// License:                                                                  //\n// This program is free software; you can redistribute it                    //\n// and/or modify it under the terms of the GNU General Public                //\n// License as published by the Free Software Foundation;                     //\n// either version 2 of the License, or (at your option) any                  //\n// later version.                                                            //\n//                                                                           //\n// This program is distributed in the hope that it will be useful,           //\n// but WITHOUT ANY WARRANTY; without even the implied warranty of            //\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             //\n// GNU General Public License for more details.                              //\n//                                                                           //\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Module dependencies.                                                      //\n///////////////////////////////////////////////////////////////////////////////\nvar express = require('express'),\n    routes = require('./routes'),\n    conf = require('./config'),\n    cons = require('consolidate'),\n    mongoose = require('mongoose'),\n    passport = require('passport'),\n    Account = require('./models/account'),\n    Station = require('./controllers/station'),\n    Account_controller = require('./controllers/account');\n    Subscription = require('./controllers/subscription'),\n    LocalStrategy = require('passport-local').Strategy;\n\n///////////////////////////////////////////////////////////////////////////////\n// Mongo setup middleware                                                    //\n///////////////////////////////////////////////////////////////////////////////\nif(process.env.VCAP_SERVICES){\n    var env = JSON.parse(process.env.VCAP_SERVICES);\n    var mongo = env['mongodb-1.8'][0]['credentials'];\n}\nelse{\n    var mongo = {\n        \"hostname\":\"alex.mongohq.com\",\n        \"port\":10062,\n        \"username\":\"admin\",\n        \"password\":\"12345\",\n        \"name\":\"\",\n        \"db\":\"cloud-db\"\n    };\n}\nvar generate_mongo_url = function(obj){\n    obj.hostname = (obj.hostname || 'localhost');\n    obj.port = (obj.port || 27017);\n    obj.db = (obj.db || 'test');\n    if(obj.username && obj.password){\n        return \"mongodb://\" + obj.username + \":\" + obj.password + \"@\" + obj.hostname + \":\" + obj.port + \"/\" + obj.db;\n    }\n    else{\n        return \"mongodb://\" + obj.hostname + \":\" + obj.port + \"/\" + obj.db;\n    }\n};\nvar mongourl = generate_mongo_url(conf.mongohq);\n\n///////////////////////////////////////////////////////////////////////////////\n// Run app                                                                   //\n///////////////////////////////////////////////////////////////////////////////\nvar app = express();\n\n///////////////////////////////////////////////////////////////////////////////\n// CORS middleware (only to test on cloud9)                                  //\n///////////////////////////////////////////////////////////////////////////////\nvar allowCrossDomain = function(req, res, next) {\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header(\"Access-Control-Allow-Headers\", \"X-Requested-With\");\n    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');\n    res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n\n    // intercept OPTIONS method\n    if ('OPTIONS' == req.method) {\n        res.send(200);\n    }\n    else {\n        next();\n    }\n};\n\n///////////////////////////////////////////////////////////////////////////////\n// Configuration                                                             //\n///////////////////////////////////////////////////////////////////////////////\napp.configure(function(){\n    app.engine('html', cons.mustache);\n    app.set('view engine', 'html');\n    app.set('views', __dirname + '/views');\n    app.use(express.bodyParser());\n    app.use(express.methodOverride());\n    app.use(allowCrossDomain);\n    app.use(express.cookieParser());\n    app.use(express.session({ secret: conf.sessionSecret }));\n    app.use(passport.initialize());\n    app.use(passport.session());\n    app.use(require('stylus').middleware({ src: __dirname + '/public' }));\n    app.use(app.router);\n    app.use(express.static(__dirname + '/public'));\n});\n\napp.configure('development', function() {\n  app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));\n});\napp.configure('production', function() {\n  app.use(express.errorHandler());\n});\n\n///////////////////////////////////////////////////////////////////////////////\n// passport setup & strategy                                                 //\n///////////////////////////////////////////////////////////////////////////////\npassport.use(new LocalStrategy(Account.authenticate()));\npassport.serializeUser(Account.serializeUser());\npassport.deserializeUser(Account.deserializeUser());\n// Connect mongoose \nmongoose.connect(mongourl);\n// Check if connected\nmongoose.connection.on(\"open\", function(){\n    console.log(\"mongodb connected at: %s\", mongourl);\n});\n\n///////////////////////////////////////////////////////////////////////////////\n// Rutes                                                                     //\n///////////////////////////////////////////////////////////////////////////////\napp.all('/', function(req, res, next) {\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\n    res.header(\"Access-Control-Allow-Headers\", \"X-Requested-With\");\n    next();\n});\n// reusable middleware to test authenticated sessions\nfunction ensureAuthenticated(request, response, next) {\n    console.log(ensureAuthenticated);\n    if(request.isAuthenticated()) {\n        return next();\n    }\n    response.redirect('/signin'); // if failed...\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// Application rutes                                                         //\n///////////////////////////////////////////////////////////////////////////////\napp.get('/', function(request, response) {\n    response.sendfile(__dirname + '/public/index.html');\n});\napp.get('/app', routes.index);\napp.post('/station', function(request, response){\n  console.log(request.body);      // your JSON\n  response.send(request.body);    // echo the result back\n});\napp.get('/start', function(request, response) {\n    // We want to set the content-type header so that the browser understands\n    //  the content of the response.\n    response.contentType('application/json');\n\n    // Normally, the would probably come from a database, but we can cheat:\n    var last_7_days = [\n    { views_size: '05px', people_size: '25px' },\n    { views_size: '10px', people_size: '20px' },\n    { views_size: '15px', people_size: '15px' },\n    { views_size: '20px', people_size: '10px' },\n    { views_size: '25px', people_size: '05px' },\n    { views_size: '20px', people_size: '00px' },\n    { views_size: '10px', people_size: '10px' },\n    ];\n    \n  // Since the request is for a JSON representation of the people, we\n  //  should JSON serialize them. The built-in JSON.stringify() function\n  //  does that.\n  var last_7_daysJSON = JSON.stringify(last_7_days);\n\n  // Now, we can use the response object's send method to push that string\n  //  of people JSON back to the browser in response to this request:\n  response.send(last_7_daysJSON);\n});\napp.get('/subscription', function(request, response) {\n    // We want to set the content-type header so that the browser understands\n    //  the content of the response.\n    response.contentType('application/json');\n\n    var user = {\n    \"user\":\n        {\n        \tname: \"MrX\",\n            last_name:null,\n    \t\tfirst_name:null,\n            email: \"benjaminmaggi@gmail.com\",\n            id: \"50bc04d3613f5d6105000002\",\n    \t\turls:\n    \t\t\t{\n    \t\t\t\t\"self\":\"https://secure.gaug.es/me\",\n    \t\t\t\t\"gauges\":\"https://secure.gaug.es/gauges\",\n    \t\t\t\t\"clients\":\"https://secure.gaug.es/clients\"\n    \t\t\t},\n    \t}\n    };\n    // Since the request is for a JSON representation of the people, we\n    //  should JSON serialize them. The built-in JSON.stringify() function\n    //  does that.\n    var userJSON = JSON.stringify(user);\n\n    // Now, we can use the response object's send method to push that string\n    //  of people JSON back to the browser in response to this request:\n    response.send(userJSON);\n});\n// test\napp.get('/test', function(request, response) {\n    console.log(\"test\"); \n    if(request.isAuthenticated()) {\n        console.log(\"no auth\"); \n    }\n    else {\n        console.log(\"no auth\"); \n    }\n    response.contentType('application/json');\n    response.send(JSON.stringify({isAuthenticated: request.isAuthenticated(),message: \"what happened\"}));\n});\n// Mongoose\napp.post('/station/add', Station.create, function(req, res) {\n    console.log('body: ' + JSON.stringify(req.body));\n    res.contentType('application/json');\n    return res.send(JSON.stringify({ack:{type:\"test\",message:\"received ok\", code:\"441\"}}));\n});\napp.get('/mongo', Station.create);\napp.get('/setupStation/:id', Station.setupStation);\napp.get('/getStations', Station.getStations);\napp.post('/changeStation/:id', Station.update);\n\n///////////////////////////////////////////////////////////////////////////////\n// User authentication  rutes                                                //\n///////////////////////////////////////////////////////////////////////////////\napp.get('/signin', function(req, res) {\n        res.render('signin', { title: 'signin', locale: 'en_US', user: req.user });\n});\napp.post('/signin', function(req, res, next) {\n    passport.authenticate('local', function(err, user, info) {\n        if (err) { \n            return next(err); \n        }\n        if (!user) { \n            console.log(\"unauthorized\");\n            return res.render('signin', { title: 'bad login', locale: 'en_US', user: req.user });\n        }\n        req.logIn(user, function(err) {\n            if (err) { \n                return next(err);\n            }\n        });\n        console.log(\"auth okay\");\n        return res.redirect('/');\n    })(req, res, next);\n});\napp.get('/signup', function(req, res) {\n        res.render('signup', { title: 'signin', locale: 'en_US', user: req.user });\n});\napp.post('/signup', function(req, res) {\n        \n        var username = req.body.username;\n        console.log(\"registering: user: %s pass: %s\", req.body.username, req.body.password);\n        \n        Account.findOne({username : username }, function(err, existingUser) {\n            if (err || existingUser) {\n                console.log(\"existingUser\");\n                return res.render('signup', { account : account });\n            }\n            var account = new Account({ username : req.body.username, email: req.body.username});\n            account.setPassword(req.body.password, function(err) {\n                if (err) {\n                    return res.render('signup', { account : account });\n                }\n                account.save(function(err) {\n                    if (err) {\n                        return res.render('signup', { account : account });\n                    }\n                    return res.redirect('/');\n                });\n            });\n        });\n});\napp.post('/forgot', function(req, res) {\n\n    var email = req.body.email;\n    var retJSON = \"\";\n    console.log(\"forgot: email\", email);\n    //res.writeHead(401, {\"Content-Type\": \"application/json\"});\n    res.contentType('application/json');\n\n    Account.findOne({email : email }, function(err, existingUser) {\n            if (err) {\n                res.statusCode = 401;\n                retJSON = JSON.stringify({\"message\":\"Error\",\"status\":\"fail\"});\n                return res.send(retJSON);\n            }\n            else if (existingUser) {\n                console.log(\"sending email with new password to: %s\", email);\n                retJSON = JSON.stringify({\"message\":\"Error\",\"status\":\"fail\"});\n                return res.send(retJSON);\n            }\n            else {\n                // Invalid login/password\n                //res.writeHead(401, {\"Content-Type\": \"application/json\"});\n                //res.end(JSON.stringify({error:{type:\"Unauthorized\",message:\"Wrong username and/or password.\", code:\"401\"}}));\n                res.statusCode = 401;\n                var ret = {error:{type:\"Unauthorized\",message:\"Wrong username and/or password.\", code:\"401\"}};\n                retJSON = JSON.stringify(ret);\n                return res.send(retJSON);\n            }\n    });\n});\napp.get('/signout', function(req, res) {\n    req.logout();\n    res.redirect('/');\n});\n\napp.get('/account/getbyid/:id', ensureAuthenticated, Account_controller.getAccountById);\napp.get('/account/getAccount', ensureAuthenticated, Account_controller.getAccount);\napp.put('/account/subscription', ensureAuthenticated, Account_controller.setSubscription);\n\n\n///////////////////////////////////////////////////////////////////////////////\n// Subscription rutes                                                        //\n///////////////////////////////////////////////////////////////////////////////\napp.get('/subscription/getall', Subscription.getAll);\napp.get('/subscription/getbyid/:id', ensureAuthenticated, Subscription.getById);\napp.post('/subscription/create', Subscription.create);\napp.delete('/subscription/remove/:id', Subscription.remove);\napp.put('/subscription/reorder/:id', Subscription.reorder);\napp.put('/subscription/update/:id', Subscription.update);\n\n///////////////////////////////////////////////////////////////////////////////\n// Station rutes                                                             //\n///////////////////////////////////////////////////////////////////////////////\napp.get('/station/getall', Station.getAll);\napp.get('/station/getbyid/:id', Station.getById);\napp.get('/station/create', Station.create);\napp.post('/station/update/:id', Station.update);\napp.delete('/station/remove/:id', Station.remove);\napp.get('/station/removeall', Station.removeall);\n\n///////////////////////////////////////////////////////////////////////////////\n// API Key Generation rutes                                                  //\n///////////////////////////////////////////////////////////////////////////////\napp.get('/clients',  function(request, response, next) {\n    response.contentType('application/json');\n    var mock = {\"clients\":[{\"created_at\":\"2012-12-18T04:50:25Z\",\"urls\":{\"self\":\"https://secure.gaug.es/clients/5ddfdb50358f68fa55670adbc3d86ea2\"},\"description\":\"popopo\",\"key\":\"5ddfdb50358f68fa55670adbc3d86ea2\"}]}\n    var retJSON = JSON.stringify(mock);\n    return response.send(retJSON);\n});\napp.post('/clients',  function(request, response, next) {\n    var description = request.body.description;\n    var key = Math.floor(Math.random() * 99999999999999);\n    var self = \"http://\" + process.env.IP + \"/clients/\" + key;\n\n    console.log(\"Generating new API Key for: \", description);\n    response.contentType('application/json');\n    var mock = { \n        \"client\":[{\n            \"created_at\": new Date(),\n            \"urls\": { \"self\": self},\n            \"description\": description,\n            \"key\": key\n        }]\n    };\n    mock = {\"client\":{\"created_at\":\"2012-12-18T16:27:56Z\",\"urls\":{\"self\":\"https://secure.gaug.es/clients/429edc9f0fae89c849b7b335dbf5c760\"},\"description\":\"octo\",\"key\":\"429edc9f0fae89c849b7b335dbf5c760\"}};\n    var retJSON = JSON.stringify(mock);\n    return response.send(retJSON);\n});\n\n///////////////////////////////////////////////////////////////////////////////\n// socket.io                                                                 //\n///////////////////////////////////////////////////////////////////////////////\nvar server = require('http').createServer(app)\nvar io = require('socket.io').listen(server);\n\nserver.listen(process.env.PORT);\n\nio.sockets.on('connection', function (socket) {\n    \n    io.sockets.emit('this', { will: 'be received by everyone'});\n    \n    socket.on('message', function (message) {\n        console.log(\"Got message: \" + message);\n        ip = socket.handshake.address.address;\n        url = message;\n        io.sockets.emit('news', { 'connections': Object.keys(io.connected).length, 'ip': '***.***.***.' + ip.substring(ip.lastIndexOf('.') + 1), 'url': url, 'xdomain': socket.handshake.xdomain, 'timestamp': new Date()});\n    });\n    socket.on('my other event', function (data) {\n        console.log('my other event' + data);\n    });\n    socket.on('consoleio', function (data) {\n        console.log('consoleio' + JSON.stringify(data));\n        data.message = data.message || {};\n        switch(data.message)\n        {\n            case 'exec':\n                \n                var spawn = require('child_process').spawn;\n                var exec = spawn(data.command, data.arguments); //spawn(data.command, data.arguments);\n                exec.stdout.setEncoding('ascii');\n                exec.stderr.setEncoding('ascii');\n                \n                exec.stdout.on('data', function (data) {\n                  console.log('stdout: ' + data);\n                  io.sockets.emit('consoleio', { message: 'exec', io: 'stdout', command: data.command, result: data });\n                });\n                \n                exec.stderr.on('data', function (data) {\n                    console.log('stderr: ' + data);\n                    io.sockets.emit('consoleio', { message: 'exec', io: 'stderr', command: data.command, result: data });\n                });\n                \n                exec.on('exit', function (code) {\n                    console.log('child process exited with code ' + code);\n                    io.sockets.emit('consoleio', { message: 'exec', command: data.command, result: 'exit' });\n                });\n                break;\n                \n        }\n        io.sockets.emit('consoleio', { event: 'message received', data: data});\n    });\n    socket.on('disconnect', function () {\n        console.log(\"Socket disconnected\");\n        io.sockets.emit('pageview', { 'connections': Object.keys(io.connected).length });\n    });\n\n});\n"]],"start1":0,"start2":0,"length1":0,"length2":19431}]],"length":19431}
{"contributors":[],"silentsave":true,"ts":1357739603277,"patch":[[{"diffs":[[0,"ten("],[-1,"process.env.PORT"],[1,"conf.listenPort"],[0,");\n\n"]],"start1":17167,"start2":17167,"length1":24,"length2":23}]],"length":19430,"saved":false}

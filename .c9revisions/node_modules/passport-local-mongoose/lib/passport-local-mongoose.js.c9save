{"ts":1355013993965,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var crypto = require('crypto');\n\nmodule.exports = function(schema, options) {\n    options = options || {};\n    options.saltlen = options.saltlen || 32;\n    options.iterations = options.iterations || 25000;\n    options.keylen = options.keylen || 512;\n\n    schema.add({ username : String, hash: String, salt: String });\n\n    schema.methods.setPassword = function (password, cb) {\n        if (!password) {\n            return cb(new Error(\"Password argument not set!\"));\n        }\n        \n        var self = this;\n\n        crypto.randomBytes(options.saltlen, function(err, buf) {\n            if (err) {\n                return cb(err);\n            }\n\n            var salt = buf.toString('hex');\n\n            crypto.pbkdf2(password, salt, options.iterations, options.keylen, function(err, hashRaw) {\n                if (err) {\n                    return cb(err);\n                }\n\n                var hash = new Buffer(hashRaw).toString('hex');\n\n                self.hash = hash;\n                self.salt = salt;\n\n                cb(null, self);\n            });\n        });\n    }\n\n    schema.methods.authenticate = function(password, cb) {\n        var self = this;\n\n        // TODO: Fix callback and behavior to match passport\n        crypto.pbkdf2(password, this.salt, options.iterations, options.keylen, function(err, hashRaw) {\n            if (err) {\n                return cb(err);\n            }\n            \n            var hash = new Buffer(hashRaw).toString('hex');\n\n            if (hash === self.hash) {\n                return cb(null, self);\n            } else {\n                return cb(null, false, { message: 'Incorrect password' });\n            }\n        });\n    }\n\n    schema.statics.authenticate = function() {\n        var self = this;\n\n        return function(username, password, cb) {\n            self.findOne({ username: username }, function(err, user) {\n                if (err) { return cb(err); }\n    \n                if (user) {\n                    return user.authenticate(password, cb);\n                } else {\n                    return cb(null, false, { message: 'Incorrect username' })\n                }\n            });\n        }\n    }\n\n    schema.statics.serializeUser = function() {\n        return function(user, cb) {\n            cb(null, user.username);\n        }\n    }\n\n    schema.statics.deserializeUser = function() {\n        var self = this;\n        \n        return function(username, cb) {\n            self.findOne({ username: username }, cb);\n        }\n    }\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":2497}]],"length":2497}
